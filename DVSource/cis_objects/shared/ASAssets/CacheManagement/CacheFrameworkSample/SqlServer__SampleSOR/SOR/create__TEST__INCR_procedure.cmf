<?xml version="1.1" encoding="UTF-8"?>
<metadata name="create_TEST_INCR" path="/shared/ASAssets/CacheManagement/CacheFrameworkSample/SqlServer_SampleSOR/SOR/create_TEST_INCR" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="catalogName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="schemaName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="cursCombinedResult" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1024"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFrameworkSample/SqlServer_SampleSOR/SOR/ExecuteDDL" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputSQL" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="outputValue">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	The methodology with the deleted table is to emulate the source table exactly plus added a deleted date column at the end
	that signifies when the row is deleted.  The Cache Framework uses this column to keep track of what rows have been deleted
	and applied to the cache table.
*/
PROCEDURE create_TEST_INCR(
	IN  catalogName				VARCHAR,
	IN  schemaName				VARCHAR,
	OUT cursCombinedResult		VARCHAR(1024) -- 1=success, -1=failure
)
BEGIN
	DECLARE sqlStatement		VARCHAR(4096);
	DECLARE cursType			VARCHAR;
	DECLARE i					INTEGER;
	DECLARE ex					EXCEPTION;
	DECLARE curs				CURSOR (result INTEGER);
	DECLARE cursResult			INTEGER;
	DECLARE status				VARCHAR(4);
	DECLARE TYPE sqlRowType		ROW(cursType VARCHAR, sqlStatement LONGVARCHAR);
	DECLARE sqlRow				sqlRowType;
	DECLARE sqlVect				VECTOR(sqlRowType);

	IF (catalogName IS NULL or LENGTH(catalogName) = 0) THEN
		RAISE ex VALUE &apos;The catalogName variable cannot be null or empty.&apos;;
	END IF;
	IF (schemaName IS NULL or LENGTH(schemaName) = 0) THEN
		RAISE ex VALUE &apos;The schemaName variable cannot be null or empty.&apos;;
	END IF;

	SET sqlVect = VECTOR[
		 (&apos;cursSequence&apos;, REPLACE(REPLACE(&apos;CREATE SEQUENCE [{1}].[TEST_INCR_SEQ] AS [BIGINT] START WITH 1 INCREMENT BY 1 NO CYCLE CACHE&apos;, &apos;{0}&apos;, catalogName), &apos;{1}&apos;, schemaName))

		,(&apos;cursTable&apos;, REPLACE(REPLACE(
	&apos;CREATE TABLE {0}.{1}.TEST_INCR (
	SEQ			BIGINT, 			
	K1      	INTEGER,
	K2      	VARCHAR(10),
	C3			VARCHAR(255),
	C4			DECIMAL(10,2),
	ACTIVITY	VARCHAR(1),
	SDT      	datetime,
	CONSTRAINT TEST_INCR_PK PRIMARY KEY (K1,K2)
	)&apos;, &apos;{0}&apos;, catalogName), &apos;{1}&apos;, schemaName))

		,(&apos;cursHistTable&apos;,REPLACE(REPLACE(
	&apos;CREATE TABLE {0}.{1}.TEST_INCR_HIST (
	SEQ			BIGINT, 			
	K1      	INTEGER,
	K2      	VARCHAR(10),
	C3			VARCHAR(255),
	C4			DECIMAL(10,2),
	ACTIVITY	VARCHAR(1),
	SDT      	datetime,
	EDT      	datetime,
	CONSTRAINT TEST_INCR_HIST_PK PRIMARY KEY (K1,K2,SDT)
	)&apos;, &apos;{0}&apos;, catalogName), &apos;{1}&apos;, schemaName))

		,(&apos;cursDelTable&apos;,REPLACE(REPLACE(
	&apos;CREATE TABLE {0}.{1}.TEST_INCR_DEL(
	SEQ			BIGINT, 			
	K1      	INTEGER,
	K2      	VARCHAR(10),
	SDT      	datetime,
	CONSTRAINT TEST_INCR_DEL_PK PRIMARY KEY (K1,K2,SDT)
	)&apos;, &apos;{0}&apos;, catalogName), &apos;{1}&apos;, schemaName))

	,(&apos;cursDelTrigger&apos;, REPLACE(REPLACE(
	&apos;CREATE TRIGGER {1}.TEST_INCR_DEL_TRIGGER
    ON [{0}].[{1}].[TEST_INCR]
    AFTER DELETE
    AS
    BEGIN
        DECLARE @edtActual datetime;
        DECLARE @K1 INTEGER, @K2 VARCHAR(10);
        set @edtActual = GETDATE();

        If exists(select * from deleted) and not exists(Select * from inserted)
        BEGIN
            SELECT @K1 = K1 from deleted d;
            SELECT @K2 = K2 from deleted d;
            /* Insert a new record as &quot;deleted&quot;. */
            INSERT INTO [{0}].[{1}].[TEST_INCR_DEL] VALUES (NEXT VALUE FOR [{1}].[TEST_INCR_SEQ], @K1, @K2, @edtActual);
        END
    END&apos;, &apos;{0}&apos;, catalogName), &apos;{1}&apos;, schemaName))

		,(&apos;cursHistTrigger&apos;, REPLACE(REPLACE(
	&apos;CREATE TRIGGER {1}.TEST_INCR_TRIGGER
    ON [{0}].[{1}].[TEST_INCR]
    AFTER INSERT, UPDATE, DELETE
    AS
    BEGIN
        DECLARE @seq int;
        DECLARE @cnt int;
        DECLARE @edtSurrogate datetime;
        DECLARE @edtActual datetime;
        DECLARE @K1 INTEGER, @K2 VARCHAR(10), @C3 VARCHAR(255), @C4	DECIMAL(10,2), @ACTIVITY VARCHAR(1), @SDT datetime;
        set @edtSurrogate = CONVERT(datetime, &apos;&apos;9999-12-31 00:00:00&apos;&apos;);
        set @edtActual = GETDATE();

        If exists (Select * from inserted) and not exists(Select * from deleted)
        BEGIN
            set @ACTIVITY = &apos;&apos;I&apos;&apos;;
            SELECT @K1 = K1 from inserted i;
            SELECT @K2 = K2 from inserted i;
            SELECT @C3 = C3 from inserted i;
            SELECT @C4 = C4 from inserted i;
            SELECT @SDT = SDT from inserted i;
            /* Update the previous current record. */
            UPDATE [{0}].[{1}].[TEST_INCR_HIST] SET EDT = @SDT WHERE K1 = @K1 and K2 = @K2 AND (EDT = @edtSurrogate OR EDT IS NULL);
            /* Insert a new record as &quot;inserted&quot;. */
            INSERT INTO [{0}].[{1}].[TEST_INCR_HIST] VALUES (NEXT VALUE FOR [{1}].[TEST_INCR_SEQ], @K1, @K2, @C3, @C4, @ACTIVITY, @SDT, @edtSurrogate);
        END

        if exists(SELECT * from inserted) and exists (SELECT * from deleted)
        BEGIN
            set @ACTIVITY = &apos;&apos;U&apos;&apos;;
            SELECT @K1 = K1 from inserted i;
            SELECT @K2 = K2 from inserted i;
            SELECT @C3 = C3 from inserted i;
            SELECT @C4 = C4 from inserted i;
            SELECT @SDT = SDT from inserted i;
            /* Update the previous current record. */
            UPDATE [{0}].[{1}].[TEST_INCR_HIST] SET EDT = @SDT WHERE K1 = @K1 and K2 = @K2 AND (EDT = @edtSurrogate OR EDT IS NULL);
            /* Insert a new record as &quot;updated&quot;. */
            INSERT INTO [{0}].[{1}].[TEST_INCR_HIST] VALUES (NEXT VALUE FOR [{1}].[TEST_INCR_SEQ], @K1, @K2, @C3, @C4, @ACTIVITY, @SDT, @edtSurrogate);
        END

        If exists(select * from deleted) and not exists(Select * from inserted)
        BEGIN
            set @ACTIVITY = &apos;&apos;D&apos;&apos;;
            SELECT @K1 = K1 from deleted d;
            SELECT @K2 = K2 from deleted d;
            SELECT @C3 = C3 from deleted d;
            SELECT @C4 = C4 from deleted d;
            SELECT @SDT = SDT from deleted d;
            /* Update the previous current record. */
            UPDATE [{0}].[{1}].[TEST_INCR_HIST] SET EDT = @edtActual WHERE K1 = @K1 and K2 = @K2 AND (EDT = @edtSurrogate OR EDT IS NULL);
            /* Insert a new record as &quot;deleted&quot;. */
            INSERT INTO [{0}].[{1}].[TEST_INCR_HIST] VALUES (NEXT VALUE FOR [{1}].[TEST_INCR_SEQ], @K1, @K2, @C3, @C4, @ACTIVITY, @edtActual, @edtActual);
        END
    END&apos;, &apos;{0}&apos;, catalogName), &apos;{1}&apos;, schemaName))
	];
/*
	SET sqlStatement3 = REPLACE(REPLACE(
	&apos;CREATE TRIGGER {1}.TEST_INCR_TRIGGER
      ON {0}.{1}.TEST_INCR
    AFTER DELETE AS
    BEGIN
        INSERT INTO {0}.{1}.TEST_INCR_DEL 
           SELECT d.*, GETDATE()
           FROM DELETED d
    END&apos;, &apos;{0}&apos;, catalogName), &apos;{1}&apos;, schemaName);
*/
	SET i = 1;
	WHILE (i &lt;= CARDINALITY(sqlVect)) DO
		SET sqlRow = sqlVect[i];

		BEGIN INDEPENDENT TRANSACTION
			CALL PRINT(i||&apos;:-----------------------------------------------------------------------------------------------&apos;);
			CALL PRINT(sqlRow.sqlStatement);
			OPEN curs FOR SELECT * FROM /shared/ASAssets/CacheManagement/CacheFrameworkSample/SqlServer_SampleSOR/SOR/ExecuteDDL(sqlRow.sqlStatement);
			FETCH curs INTO cursResult;
			CLOSE curs;
			SET status = &apos;PASS&apos;;
		EXCEPTION
			ELSE
				CALL PRINT(sqlRow.cursType||&apos; EXCEPTION=&apos;||CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR));
				SET cursResult = -1;
				SET status = &apos;FAIL&apos;;
		END;
		IF (cursCombinedResult IS NULL) THEN
			SET cursCombinedResult = &apos;&apos;;
		ELSE
			SET cursCombinedResult = cursCombinedResult || &apos;,  &apos;;
		END IF;
		SET cursCombinedResult = cursCombinedResult || sqlRow.cursType||&apos;=&apos;||status;
		CALL PRINT(&apos;&apos;);
		SET i = i + 1;
	END WHILE;
END</attribute>
  <attribute name="creationDate" type="LONG">1410976495807</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1415111280153</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">10/167</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/159</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/177</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/160</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>