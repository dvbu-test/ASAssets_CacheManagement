<?xml version="1.1" encoding="UTF-8"?>
<metadata name="ConfigureCacheScript" path="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/ConfigureCacheScript" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="prefix" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inSequenceNum" direction="IN" nullable="true">
      <datatype name="BIGINT" type="INTEGER"/>
    </parameter>
    <parameter name="inOrigUserName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="constantsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="CachingDataSelect" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="errStatus" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="errMessage" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GetProperty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="property" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/Pause" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="timeInMilliSeconds" direction="IN">
        <datatype type="INTEGER"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="OracleObjectTableExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleObjectIndexExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCreateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleDropTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleIndexSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleCreateIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCreateUniqueIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleDropIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCreateSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleDropSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleGetSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleExecuteTableStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleObjectNameMaxLength" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleCachekeyName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleTruncateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleMergeSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleMergeTableSql" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleMergeTableExample" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleAuditTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCachingDataCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerObjectTableExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerObjectIndexExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCreateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerDropTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerIndexSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerCreateIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCreateUniqueIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerDropIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCreateSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerDropSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerGetSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerExecuteTableStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerObjectNameMaxLength" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerCachekeyName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerTruncateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerMergeSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerMergeTableSql" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerMergeTableExample" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerAuditTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCachingDataCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaObjectTableExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaObjectIndexExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaCreateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaDropTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaIndexSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaCreateSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaDropSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaGetSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaExecuteTableStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaExecuteTableExpressStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaObjectNameMaxLength" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaCachekeyName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaTruncateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaMergeSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaMergeTableSql" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaMergeTableExample" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaCachingDataCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaAuditTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="AuditTableDropDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="AuditSeqTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="AuditSeqTableDropDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataDropDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataSelect" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataSelectDeployment" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataDelete" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataInsert" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CISSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CISSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="IU_CACHE_KEY" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="D_CACHE_KEY" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_FULL_SINGLE" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_FULL_MULTI" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_INCREMENTAL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_HYBRID_DS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_HYBRID_DNS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_MERGE_TYPE1" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_MERGE_TYPE2" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_MERGE_TYPE4" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAll" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllFull" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllHybrid" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllMerge" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllIncremental" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CacheStatusSelect" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CacheStatusSelectByResPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="procedureGenerationPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="procedureTemplate" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="pushRecursive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/ExecuteDDL" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SQLString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="cachekey" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="inPrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsDDL" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inCatalogName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inSchemaName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inResourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inCacheType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inAttributes" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outGetResourceDDL" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsFullCallback" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="viewPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="viewName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cacheType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="attributes" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="firstRefreshScriptPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="firstRefreshScriptImplPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="secondRefreshScriptPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="secondRefreshScriptImplPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsHybridDeltaMergeType1" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="viewPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="targetDatabasePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="stageViewPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="stageDatabasePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="scriptPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="cacheType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="attributes" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="firstRefreshScriptPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="secondRefreshScriptPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsHybridDeltaMergeType2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="viewPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="targetDatabasePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="stageViewPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="stageDatabasePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="scriptPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="cacheType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="attributes" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="firstRefreshScriptPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="secondRefreshScriptPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsHybridDeltaMergeType4" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="viewPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="targetDatabasePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="stageViewPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="stageDatabasePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="scriptPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="cacheType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="attributes" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="firstRefreshScriptPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="secondRefreshScriptPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsHybridDeltaNoStage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="viewPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="targetPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="stageViewPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="scriptPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="cacheType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="attributes" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="firstRefreshScriptPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="secondRefreshScriptPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsHybridDeltaStage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="viewPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="targetPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="stageViewPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="scriptPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="cacheType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="attributes" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="firstRefreshScriptPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="secondRefreshScriptPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsIncremental" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="viewPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="targetPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="scriptPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="cacheType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="attributes" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="firstRefreshScriptPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="secondRefreshScriptPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/CreateIndexConfigure" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="catalogName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="schemaName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="tableName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="tablePrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="multiTableNameFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cacheType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="attributes" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/CreateStagingView" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="sourceViewName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="sourceViewPath" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="targetViewPath" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="targetViewNamePrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="targetViewNameSuffix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DeleteDBSequence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceName" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inPrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DropIndexConfigure" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="catalogName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="schemaName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="tableName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="tablePrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="tableSuffix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="multiTableNameFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cacheType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="attributes" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DropResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debugLoggingTypeOverride" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DropTable" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="catalogName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="schemaName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="tableName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="tablePrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="tableSuffix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cacheType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="attributes" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/FixPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outPath" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="attributeName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="attributeXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="attributeValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBSequence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSequenceName" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inSequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="inOrigUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inPrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="sequenceNum" direction="OUT">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBSequenceByName" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSequenceName" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inSequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="inOrigUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inPrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="sequenceNum" direction="OUT">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/ValidateTableDependency" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="cacheType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cacheViewResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="stagingViewResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="datasourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="datasourceCatalogName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="datasourceSchemaName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cacheTableName" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="stagingTableName" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="attributes" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/IntrospectTables" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="inOrigUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="datasourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="catalogName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="schemaName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="tableName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debugLoggingTypeOverride" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/ResetIncrMaintenanceLevel" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="inOrigUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/UpdateCacheConfiguration" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inDSPath" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inTargetTable" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inCacheType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="configureSchedule" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="inFirstRefreshScriptPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inSecondRefreshScriptPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="attributes" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debugLevel" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="debugLoggingTypeOverride" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inModuleName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cachekey" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="message" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/conversions/convertBoolean" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="request" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="response" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/conversions/convertYN" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="request" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="response" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createAllFoldersPrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="updatePrivilegesRecursively" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/destroyResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateTrigger" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="enabled" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="conditionType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="actionType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="triggerAttrVect" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="TriggerType" type="TREE" refId="2">
              <element name="trName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="trValue">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="attributeVect" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="AttributeType" type="TREE" refId="3">
              <element name="attrName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attrType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attrValue">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="4"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="4"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexSplit" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Limit" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="splitElement">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="constantName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getDelimitedOccurrence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/convertBoolean" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/convertYN" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/getConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/users/composite/admin/DoMultiStudents/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outputString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* ConfigureCacheScript:

	This script is the main driver script and will do the following
		-- Query CachngData driver table for all records with RUN_YN = &apos;Y&apos;
		-- Create caching table on data source
		-- Create staging cache table on data source
		-- Intropsect both tables
		-- Create staging view resource as a copy of primary view
		-- Create cache load script
		-- Configure caching on primary view
		-- Configure caching on staging view (default caching method)
		-- Drop and recreate cacheing table, staging table, caching scripts, staging view as well as trigger 	

	Modified Date:	Modified By:		CIS Version:	Reason:
	01/20/2014		Manny Bhatia		6.2.5			Created new
	09/25/2014		Mike Tinius			6.2.6			Modified to make cache framework generic. 
*/  
PROCEDURE ConfigureCacheScript(
	IN  prefix					VARCHAR,		-- The prefix is affixed to the log messages.  Since this procedure is called for cache generation and deployment, 
												--    it allows the invoking procedure to personalize the prefix so that all log records are associated with the right type.
	IN  inSequenceNum			BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
	IN  inOrigUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
	IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
	IN  CachingDataSelect		LONGVARCHAR,	-- The SQL statement for querying against the Caching Data table.
	OUT errStatus 				VARCHAR,		-- Status=SUCCESS or FAIL
	OUT errMessage 				LONGVARCHAR		-- Status message upon FAIL othwerwise NULL
)
BEGIN
	DECLARE moduleName 						VARCHAR(255) 	DEFAULT &apos;ConfigureCacheScript&apos;;-- name of SQL Script
	-- CommonTypes variables
	DECLARE CommonTypesPath					VARCHAR(4096) 	DEFAULT /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.CommonTypesPath;
	DECLARE constantsType					VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;ApplicationConstantsType&apos;); -- [Oracle, SqlServer, Netezza]
	DECLARE objectNameMaxLength				INTEGER			DEFAULT CAST(TRIM(NVL(getConstant(CommonTypesPath, constantsType||&apos;ObjectNameMaxLength&apos;),&apos; &apos;)) AS INTEGER);
	DECLARE CACHE_TYPE_FULL_SINGLE			VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;CACHE_TYPE_FULL_SINGLE&apos;);	-- FS=Full cache single table
	DECLARE CACHE_TYPE_FULL_MULTI			VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;CACHE_TYPE_FULL_MULTI&apos;);	-- FM=Full cache Multi-table
	DECLARE CACHE_TYPE_INCREMENTAL			VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;CACHE_TYPE_INCREMENTAL&apos;);	-- I=Pure Incremental cache with no staging at all
	DECLARE CACHE_TYPE_HYBRID_DS			VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;CACHE_TYPE_HYBRID_DS&apos;);	-- HS=Hybrid cache with Delta Staging (Initial and Delta are the same script)
	DECLARE CACHE_TYPE_HYBRID_DNS			VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;CACHE_TYPE_HYBRID_DNS&apos;);	-- HN=Hybrid Delta No Staging (Initial and Delta are separate scripts)
	DECLARE CACHE_TYPE_MERGE_TYPE1			VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;CACHE_TYPE_MERGE_TYPE1&apos;);	-- MT1=Merge Type 1 using Deleted Table
	DECLARE CACHE_TYPE_MERGE_TYPE2			VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;CACHE_TYPE_MERGE_TYPE2&apos;); -- MT2=Merge Type 2 using History table with Start and End Date (Bi-temporal)
	DECLARE CACHE_TYPE_MERGE_TYPE4			VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;CACHE_TYPE_MERGE_TYPE4&apos;); -- MT4=Merge Type 4 using CDC style where there is an activity column specifying the action [I,U,D]
	DECLARE ValidCacheTypesAll				VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;ValidCacheTypesAll&apos;);
	DECLARE ValidCacheTypesAllFull			VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;ValidCacheTypesAllFull&apos;);
	DECLARE ValidCacheTypesAllHybrid		VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;ValidCacheTypesAllHybrid&apos;);
	DECLARE ValidCacheTypesAllMerge			VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;ValidCacheTypesAllMerge&apos;);
	DECLARE ValidCacheTypesAllIncremental	VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;ValidCacheTypesAllIncremental&apos;);
	DECLARE IndexSupported					BOOLEAN			DEFAULT convertBoolean(NVL(getConstant(CommonTypesPath, constantsType||&apos;IndexSupported&apos;),&apos;false&apos;));
	DECLARE MergeSupported					BOOLEAN			DEFAULT convertBoolean(NVL(getConstant(CommonTypesPath, constantsType||&apos;MergeSupported&apos;),&apos;false&apos;));
	-- General variables
	DECLARE DEBUG_LEVEL_INFO 				INTEGER		 	DEFAULT CAST(getConstant(constantsPath, &apos;DEBUG_LEVEL_INFO&apos;) AS INTEGER);
	DECLARE DEBUG_LEVEL_ERROR 				INTEGER		 	DEFAULT CAST(getConstant(constantsPath, &apos;DEBUG_LEVEL_ERROR&apos;) AS INTEGER);
	DECLARE DEBUG_LEVEL_DEBUG 				INTEGER		 	DEFAULT CAST(getConstant(constantsPath, &apos;DEBUG_LEVEL_DEBUG&apos;) AS INTEGER);
 	DECLARE organizationName 				VARCHAR(255)	DEFAULT getConstant(constantsPath, &apos;OrganizationName&apos;);
 	DECLARE applicationName 				VARCHAR(255)	DEFAULT getConstant(constantsPath, &apos;ApplicationName&apos;);
 	DECLARE CachingDataTablePath			VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;CachingDataTablePath&apos;);
	DECLARE CachingDataCurs					CURSOR /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.CachingDataType;
	DECLARE tableSQL 						VARCHAR(1000000) DEFAULT &apos;&apos;;
	DECLARE datasourcePath 					VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;DefaultCacheDSPath&apos;);
	DECLARE datasourceFullPath				VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;DefaultCacheDSFullPath&apos;);
	DECLARE datasourceCatalogName			VARCHAR			DEFAULT getConstant(constantsPath, &apos;DefaultCacheDSCatalogName&apos;);
	DECLARE datasourceSchemaName 			VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;DefaultCacheDSSchemaName&apos;);
	DECLARE applicationIncrScriptsPath 		VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;ApplicationIncrScriptsPath&apos;);				-- Hybrid and incremental cache scripts to be generated.
	DECLARE applicationStageViewPath 		VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;ApplicationStageViewPath&apos;);					-- Used for holding the location of the cache staging views to be generated.
	DECLARE applicationCacheProcPath 		VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;ApplicationCacheProcPath&apos;);					-- Generated Pre/Post-Refresh Callback procedure path
	DECLARE applicationCacheProcImplPath 	VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;ApplicationCacheProcImplPath&apos;);				-- Application implementation path for pre/post-refresh callback procedures
	DECLARE applicationTriggersPath 		VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;ApplicationTriggersPath&apos;);					-- Used for the trigger path location
	DECLARE cachingPrefix 					VARCHAR			DEFAULT TRIM(NVL(getConstant(constantsPath, &apos;DefaultCacheTablePrefix&apos;),&apos; &apos;));	-- Used for prepending a cache database table prefix.
	DECLARE stagingPrefix 					VARCHAR			DEFAULT TRIM(NVL(getConstant(constantsPath, &apos;DefaultStageTablePrefix&apos;),&apos; &apos;));	-- Used for prepending a staging view name and cache database table prefix.
	DECLARE cachingSuffix 					VARCHAR			DEFAULT TRIM(NVL(getConstant(constantsPath, &apos;DefaultCacheTableSuffix&apos;),&apos; &apos;));	-- Used for appending a cache database table suffix.
	DECLARE stagingSuffix 					VARCHAR			DEFAULT TRIM(NVL(getConstant(constantsPath, &apos;DefaultStageTableSuffix&apos;),&apos; &apos;));	-- Used for appending a staging view name and cache database table suffix.
	DECLARE cacheScriptInitialSuffix 		VARCHAR			DEFAULT getConstant(constantsPath, &apos;DefaultInitialLoadScriptSuffix&apos;);			-- Used for appending a cache initial load script suffix name.
	DECLARE cacheScriptDeltaSuffix 			VARCHAR			DEFAULT getConstant(constantsPath, &apos;DefaultDeltaLoadScriptSuffix&apos;);				-- Used for appending a cache delta load script suffix name.
	DECLARE triggerNameSuffix 				VARCHAR			DEFAULT emptyStr(getConstant(constantsPath, &apos;DefaultTriggerNameSuffix&apos;));		-- Used for appending a trigger suffix name to the trigger path.
	DECLARE purgeTriggerNameSuffix			VARCHAR			DEFAULT emptyStr(getConstant(constantsPath, &apos;DefaultPurgeTriggerNameSuffix&apos;));	-- Used for appending a purge trigger suffix name to the trigger path.
	DECLARE applicationRefreshCachePath 	VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;ApplicationRefreshCachePath&apos;);				-- Used for the application refresh cache path
	DECLARE applicationPurgeCachePath 		VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;ApplicationPurgeCachePath&apos;);				-- Used for the application refresh cache path

	DECLARE attributes						LONGVARCHAR;
	DECLARE firstRefreshScriptPath			VARCHAR(2048);		-- Returns the first Refresh Script Path (a.k.a. pre-callback procedure or it contains the Initial load script)
	DECLARE firstRefreshScriptImplPath		VARCHAR(2048);		-- Returns the first Refresh Implementation Script (a.k.a. pre-callback impl procedure)
	DECLARE secondRefreshScriptPath 		VARCHAR(2048);		-- Returns the second Refresh Script Path (a.k.a. post-callback procedure or it contains the Delta load script)
	DECLARE secondRefreshScriptImplPath 	VARCHAR(2048);		-- Returns the second Refresh Implementation Script (a.k.a. post-callback impl procedure)
	DECLARE cachekey						INTEGER 		DEFAULT 0;
	DECLARE parentPath						VARCHAR(4096);
	DECLARE resourcePath	 				VARCHAR(4096);
	DECLARE resourceType					VARCHAR(4096) 	DEFAULT &apos;TABLE&apos;;
	DECLARE resourceName 					VARCHAR(255);
	DECLARE resourceNameUPPER				VARCHAR(255);
	DECLARE resourceNameProc				VARCHAR(255);
	DECLARE prefixResourceName				VARCHAR(4096);
	DECLARE triggerName						VARCHAR;
	DECLARE cachingProcParams 				VARCHAR(10000);
	DECLARE sessionID						DECIMAL(38,0);
	DECLARE sequenceNum						BIGINT 			DEFAULT inSequenceNum;
	DECLARE sequenceName					VARCHAR(4096);
	DECLARE origUserName					VARCHAR;
	DECLARE seqMessage						LONGVARCHAR;
	DECLARE dropRecreateViewYN				CHAR(1);
	DECLARE dropRecreateTableYN				CHAR(1);
	DECLARE statusDropCreateTable 			BOOLEAN;
	DECLARE resExists						BOOLEAN;
	DECLARE i, loopCount					INTEGER			DEFAULT 1;
	DECLARE cacheTypeFound					BOOLEAN;
	DECLARE success							INTEGER;
	DECLARE faultResponse					XML;
	DECLARE createResponse					XML;
	-- Variables for Full multi-table caching
	DECLARE StorageBucketCatalog			VARCHAR;
	DECLARE StorageBucketSchema				VARCHAR;
	DECLARE StorageBucketNumBuckets			INTEGER;
	DECLARE StorageBucketPrefix				VARCHAR;
	-- Trigger variables
	DECLARE refreshMode						VARCHAR;
	DECLARE triggerAttrVect					VECTOR(/shared/ASAssets/Utilities/repository/updateTrigger.TriggerType);
	DECLARE timerStartTime					TIMESTAMP;
	DECLARE timerPeriod						VARCHAR;
	DECLARE timerPeriodQty					INTEGER;
	DECLARE timerRecurringDay				VARCHAR;
	DECLARE timerFromTimeInADay				TIME;
	DECLARE timerEndTimeInADay				TIME;
	DECLARE timerIsCluster					BIT;
	DECLARE triggerAnnotation				LONGVARCHAR;
	DECLARE	procedurePath					LONGVARCHAR;
	DECLARE	procedureParams					LONGVARCHAR;
	DECLARE purgeWindowPeriod				VARCHAR;
	DECLARE purgeWindowCount				INTEGER;
	DECLARE purgeColumnName					VARCHAR;

	/* 1. Generate an audit log sequence# and set it in the environment */
	CALL /lib/util/GetProperty(&apos;SESSION_ID&apos;, sessionID);
	SET sequenceName = CAST(sessionID AS VARCHAR)||&apos;_seq&apos;;
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBSequenceByName(sequenceName, inSequenceNum, inOrigUserName, constantsPath, prefix, sequenceNum, origUserName, errStatus);
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBSequence(sequenceName, sequenceNum, origUserName, constantsPath, prefix, sequenceNum, origUserName, errStatus);

	SET resourceName = &apos;INITIALIZE&apos;;
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath,	prefix||&apos;Start cache framework.&apos;);

	-- Validate the caching data select statement from the custom constants
	IF (CachingDataSelect IS NULL OR LENGTH(CachingDataSelect) = 0) THEN
		RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound 
			VALUE &apos;The constant &quot;CachingDataSelect&quot; is null or empty.  Please provide a valid constant in the procedure=&apos;||constantsPath;
	END IF;

	-- Fix paths
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/FixPath(CachingDataTablePath, CachingDataTablePath);
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/FixPath(applicationIncrScriptsPath, applicationIncrScriptsPath);
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/FixPath(applicationStageViewPath, applicationStageViewPath);
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/FixPath(applicationCacheProcPath, applicationCacheProcPath);
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/FixPath(applicationCacheProcImplPath, applicationCacheProcImplPath);
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/FixPath(applicationTriggersPath, applicationTriggersPath);
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/FixPath(applicationRefreshCachePath, applicationRefreshCachePath);
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/FixPath(applicationPurgeCachePath, applicationPurgeCachePath);

	-- Print the constants applicable to the application constants path
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;ApplicationIncrScriptsPath=&apos;||NVL(applicationIncrScriptsPath,&apos; &apos;));
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;ApplicationStageViewPath=&apos;||NVL(applicationStageViewPath,&apos; &apos;));
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;ApplicationTriggersPath=&apos;||NVL(applicationTriggersPath,&apos; &apos;));
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;DefaultCacheDSPath=&apos;||NVL(datasourcePath,&apos; &apos;));
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;DefaultCacheDSFullPath=&apos;||NVL(datasourceFullPath,&apos; &apos;));
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;DefaultCacheCatalogName=&apos;||NVL(datasourceCatalogName,&apos; &apos;));
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;DefaultCacheSchemaName=&apos;||NVL(datasourceSchemaName,&apos; &apos;));
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;DefaultCacheTablePrefix=&apos;||NVL(cachingPrefix,&apos; &apos;));
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;DefaultStagingTablePrefix=&apos;||NVL(stagingPrefix,&apos; &apos;));
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;DefaultCacheTableSuffix=&apos;||NVL(cachingSuffix,&apos; &apos;));
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;DefaultStagingTableSuffix=&apos;||NVL(stagingSuffix,&apos; &apos;));
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||constantsType||&apos;objectNameMaxLength=&apos;||objectNameMaxLength);
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;DefaultInitialLoadScriptSuffix=&apos;||NVL(cacheScriptInitialSuffix,&apos; &apos;));
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;DefaultDeltaLoadScriptSuffix=&apos;||NVL(cacheScriptDeltaSuffix,&apos; &apos;));
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;DefaultTriggerNameSuffix=&apos;||NVL(triggerNameSuffix,&apos; &apos;));
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, prefix||&apos;CachingDataSelect=&apos;||NVL(CachingDataSelect,&apos; &apos;));
	CALL PAUSE(1000);

/******************************************************
 * BEGIN MAIN: CONFIGURE A CACHE VIEW
 *****************************************************/

/******************************************************
 * BEGIN LOOP 1: GENERATE AND EXECUTE CACHE TABLE DDL
 *****************************************************/
	OPEN CachingDataCurs FOR CachingDataSelect;
	-- itereate through each resource to be configured for caching
	FOR CachingDataRow AS CachingDataCurs DO	
	/****************************************************** 
	 * [DROP] DROP RECREATE DATABASE TABLE Y/N
	 *****************************************************/
		-- Get the full resource path and then extract the resource name from the path
		SET resourcePath = CachingDataRow.RESOURCE_PATH;
		CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;E&apos;, resourceName, parentPath);
		set resourceNameUPPER = UPPER(resourceName);

		-- Get the drop and recreate database table flag
		SET dropRecreateTableYN = UPPER(convertYN(CachingDataRow.DROP_RECREATE_TABLE_YN));
		SET statusDropCreateTable = FALSE;

		-- Test for whether MERGE is supported for the given database
		IF (NOT MergeSupported AND POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllMerge) &gt; 0) THEN
			-- FORCE TO NO WHEN MERGE NOT SUPPORTED - Drop database cache and staging tables if applicable and they exist
			SET dropRecreateTableYN = &apos;N&apos;;
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath,
					prefix||&apos;Drop table abandoned due to MERGE Type not supported for database type (&apos;||constantsType||&apos;) on resource=&apos; || resourcePath);
		END IF;

		-- Drop database cache and staging tables if applicable and they exist
		IF dropRecreateTableYN = &apos;Y&apos; THEN

		  BEGIN INDEPENDENT TRANSACTION

			-- get the attributes
			SET attributes = CachingDataRow.ATTRIBUTES; 

			-- Start Logging messages
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath,
					prefix||&apos;DDL_GEN_LOOP=&apos;||loopCount||&apos;  Start cache framework DDL generation for resource=&apos; || resourcePath);

			-- Get the resource type
			SELECT &quot;type&quot; INTO resourceType FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(resourcePath, NULL);

			/****************************************************** 
			 * VALIDATE - PERFORM VARIOUS VALIDATIONS
			 *****************************************************/
			-- Validate that the cache type is within the valid cache type set.
			SET cacheTypeFound = FALSE;
			FOR r AS SELECT TRIM(splitElement) splitElement FROM /shared/ASAssets/Utilities/string/TextUtils/RegexSplit(ValidCacheTypesAll, &apos;,&apos;, 0)
				WHERE splitElement IS NOT NULL AND LENGTH(splitElement) &gt; 0
			DO
				IF (CachingDataRow.CACHE_TYPE = r.splitElement) THEN
					SET cacheTypeFound = TRUE;
				END IF;
			END FOR;
			IF (NOT cacheTypeFound) THEN
				RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exInvalidParameter 
					VALUE &apos;The cache type &quot;&apos;||emptyStr(CachingDataRow.CACHE_TYPE)||&apos;&quot; from CACHING_DATA is not a valid type.  Valid types=&apos;||emptyStr(ValidCacheTypesAll);
			END IF;

			-- Check if resource exists
			CALL /lib/resource/ResourceExists(resourcePath, resourceType, NULL, resExists); 
			IF NOT(resExists) THEN
				RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE &apos;Resource &apos; || resourcePath || &apos; not found&apos;;
			ELSE
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
					prefix||&apos;Resource &apos; || resourcePath || &apos; exists&apos;);
			END IF;

			-- Validate the table maximum length.  Get the bucket attributres from cache data row
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;NUM_BUCKETS&apos;, attributes, StorageBucketNumBuckets);
			IF (StorageBucketNumBuckets IS NULL OR StorageBucketNumBuckets &lt;= 0) THEN
				IF CachingDataRow.CACHE_TYPE in (CACHE_TYPE_FULL_MULTI)  THEN	
					SET StorageBucketNumBuckets = 3;	-- Default to 3 buckets when &lt;= 0 and the CACHE_TYPE=&apos;FM&apos; for multi-table
				ELSE
					SET StorageBucketNumBuckets = 0;	-- Set to 0 when CACHE_TYPE &lt;&gt; &apos;FM&apos; (not doing multi-table caching).
				END IF;
			END IF;
			IF (StorageBucketNumBuckets &lt;= 0) THEN
				if (LENGTH(cachingPrefix) + LENGTH(resourceName) + LENGTH(cachingSuffix) &gt; objectNameMaxLength) THEN
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exObjectNameExceedsMaxLen 
						VALUE &apos;The table &apos;||cachingPrefix || resourceNameUPPER || cachingSuffix||&apos; exceeds the max table length of &apos;||objectNameMaxLength;
				end if;
				if (LENGTH(stagingPrefix) + LENGTH(resourceName) + LENGTH(stagingSuffix) &gt; objectNameMaxLength) THEN
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exObjectNameExceedsMaxLen 
						VALUE &apos;The table &apos;||stagingPrefix || resourceNameUPPER || stagingSuffix||&apos; exceeds the max table length of &apos;||objectNameMaxLength;
				end if;
			ELSEIF (StorageBucketNumBuckets &gt; 0 and StorageBucketNumBuckets &lt; 10) THEN
				if (LENGTH(cachingPrefix) + LENGTH(resourceName) + LENGTH(cachingSuffix) + 1 &gt; objectNameMaxLength) THEN
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exObjectNameExceedsMaxLen 
						VALUE &apos;The table &apos;||cachingPrefix || resourceNameUPPER || cachingSuffix||&apos;0 exceeds the max table length of &apos;||objectNameMaxLength;
				end if;
				if (LENGTH(stagingPrefix) + LENGTH(resourceName) + LENGTH(stagingSuffix) + 1 &gt; objectNameMaxLength) THEN
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exObjectNameExceedsMaxLen 
						VALUE &apos;The table &apos;||stagingPrefix || resourceNameUPPER || stagingSuffix||&apos;0 exceeds the max table length of &apos;||objectNameMaxLength;
				end if;
			ELSE
				if (LENGTH(cachingPrefix) + LENGTH(resourceName) + LENGTH(cachingSuffix) + 2 &gt; objectNameMaxLength) THEN
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exObjectNameExceedsMaxLen 
						VALUE &apos;The table &apos;||cachingPrefix || resourceNameUPPER || cachingSuffix||&apos;10 exceeds the max table length of &apos;||objectNameMaxLength;
				end if;
				if (LENGTH(stagingPrefix) + LENGTH(resourceName) + LENGTH(stagingSuffix) + 2 &gt; objectNameMaxLength) THEN
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exObjectNameExceedsMaxLen 
						VALUE &apos;The table &apos;||stagingPrefix || resourceNameUPPER || stagingSuffix||&apos;10 exceeds the max table length of &apos;||objectNameMaxLength;
				end if;
			END IF;

			-- Validate the database table dependency with the cache view resource.
			--     Validate cached view and staging view if applicable.  
			--     Make sure that a table is not dropped/created that belongs to a different resource than the one being cached in the current loop.
				/* ValidateTableDependency(
					IN  sequenceNum					BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
					IN  origUserName				VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
					IN  constantsPath	 			VARCHAR(4096),	-- Path to the application constants procedure.
					IN  tableResourcePath			VARCHAR(4096),	-- Path to the CIS database table that is going to be created or dropped.
					IN  dependentResourcePath		VARCHAR(4096))	-- Path to the cached view (dependent resource).     
					OUT errStatus 					VARCHAR,
					OUT errMessage					LONGVARCHAR)	     */
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/ValidateTableDependency(
						sequenceNum,
						origUserName,
						constantsPath,
						CachingDataRow.CACHE_TYPE,							-- cache type.  Helps to determine how to evaluate different cache types.
						resourcePath,										-- cached view resource path that is used to validate the dependency with the cache table
						applicationStageViewPath||&apos;/&apos;||stagingPrefix || resourceNameUPPER || stagingSuffix, -- staging view path that is used to validate the dependency with the staging table
						datasourcePath,										-- caching data source path (base path without catalog and schema)
						datasourceCatalogName,								-- default cache catalog name
						datasourceSchemaName,								-- default cache schema name
						cachingPrefix || resourceNameUPPER || cachingSuffix,-- cached view table name unless specified in attributes then it is not used
						stagingPrefix || resourceNameUPPER || stagingSuffix,-- staging view table name
						attributes,							-- XML attributes potentially containing Multi-table configuration parameters for cached view.
						errStatus,
						errMessage);

			IF errStatus = &apos;SUCCESS&apos; THEN
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
						prefix||&apos;Validated dependency between cached/staging view and database table for &apos; || resourceName); 
			ELSE
				RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
						VALUE prefix||&apos;Failed validating dependencies for &apos; || resourceName || &apos;  ERROR=&apos;||emptyStr(errMessage);
			END IF;  

			SET prefixResourceName = cachingPrefix || resourceNameUPPER || cachingSuffix;

			/****************************************************** 
			 * DROP INDEXES - APPLIES TO ANY CACHE TYPE
			 *****************************************************/
			IF (IndexSupported) THEN
				-- Drop indexes if they exist for the cache table
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
					prefix||&apos;Dropping indexes for cache table &apos; || prefixResourceName); 

				/* 	 DropIndexConfigure(
					IN  sequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
					IN  origUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
					IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
					IN resourcePath				VARCHAR(4096),
					IN catalogName				VARCHAR,
					IN schemaName				VARCHAR,
					IN tableName	 			VARCHAR,
					IN tablePrefix				VARCHAR,
					IN cacheType				VARCHAR,
					IN attributes				LONGVARCHAR,
					OUT errStatus 				VARCHAR     */
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DropIndexConfigure(
						sequenceNum, 
						origUserName,
						constantsPath,
						resourcePath, 
						datasourceCatalogName,
						datasourceSchemaName,
						resourceNameUPPER,
						cachingPrefix, 
						cachingSuffix,
						NULL,					-- multi-table name filter for dropping indexes for a specific table.  Null to drop all indexes for all tables.
						CachingDataRow.CACHE_TYPE,
						attributes,
						errStatus);
				IF errStatus = &apos;SUCCESS&apos; THEN
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
						prefix||&apos;Successfully dropped indexes for cache table &apos; || prefixResourceName); 
				ELSE
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
							VALUE prefix||&apos;Failed to drop indexes for &apos; || prefixResourceName;
				END IF;  
			END IF;

			/****************************************************** 
			 * DROP CACEHE TABLE - APPLIES TO ANY CACHE TYPE
			 *****************************************************/
			-- Drop only if recreate flag is set to Y and resoruces should be created in DB otherwise ignore.
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
				prefix||&apos;Dropping cache table &apos; || datasourceFullPath || &apos;/&apos; || prefixResourceName || &apos;.&apos;);

			/* DropTable(
				IN  sequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
				IN  origUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
				IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
				IN catalogName				VARCHAR,
				IN schemaName				VARCHAR,
				IN tableName	 			VARCHAR,
				IN tablePrefix				VARCHAR,
				IN cacheType				VARCHAR,
				IN attributes				LONGVARCHAR,
				OUT errStatus 				VARCHAR       */
			-- Drop cache table if it exists
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DropTable(
					sequenceNum,
					origUserName, 
					constantsPath, 
					datasourceCatalogName, 
					datasourceSchemaName, 
					resourceNameUPPER, 
					cachingPrefix, 
					cachingSuffix, 
					CachingDataRow.CACHE_TYPE, 
					attributes, 
					errStatus);
			IF errStatus = &apos;SUCCESS&apos; THEN		
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
						prefix||&apos;Caching table &apos; || prefixResourceName || &apos; dropped successfully.&apos;); 
			ELSE 
				RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE
					&apos;Unable to drop caching table &apos; || prefixResourceName || &apos;.&apos;;
			END IF;  

			/******************************************************
			 * BEGIN: DROP STAGING TABLE HYBRID OR MERGE CACHING
			 *****************************************************/
			-- Check if Hybrid caching is enables, staging table will be required.
			IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllHybrid) &gt; 0 OR (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllMerge) &gt; 0 AND MergeSupported)) THEN 
				SET prefixResourceName = stagingPrefix || resourceNameUPPER || stagingSuffix;

				/* DropTable(
					IN  sequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
					IN  origUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
					IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
					IN catalogName				VARCHAR,
					IN schemaName				VARCHAR,
					IN tableName	 			VARCHAR,
					IN tablePrefix				VARCHAR,
					IN tableSuffix				VARCHAR,
					IN cacheType				VARCHAR,
					IN attributes				LONGVARCHAR,
					OUT errStatus 				VARCHAR       */
				-- Drop cache table if it exists
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DropTable(
						sequenceNum, 
						origUserName,
						constantsPath, 
						datasourceCatalogName, 
						datasourceSchemaName, 
						resourceNameUPPER, 
						stagingPrefix,
						stagingSuffix, 
						CACHE_TYPE_FULL_SINGLE, 
						&apos;&apos;, 
						errStatus);
				IF errStatus = &apos;SUCCESS&apos; THEN		
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
							prefix||&apos;Successfully dropped caching table &apos; || prefixResourceName || &apos;.&apos;); 
				ELSE 
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE
						&apos;Unable to drop caching table &apos; || prefixResourceName || &apos;.&apos;;
				END IF;  
			END IF;

			-- The drop tables was successful
			SET statusDropCreateTable = TRUE;

		  END; -- END TRANSACTION
		END IF;

	/****************************************************** 
	 * [RECREATE] DROP RECREATE DATABASE TABLE Y/N
	 *****************************************************/
		IF statusDropCreateTable AND dropRecreateTableYN = &apos;Y&apos; THEN 

		  BEGIN INDEPENDENT TRANSACTION

			SET prefixResourceName = cachingPrefix || resourceNameUPPER || cachingSuffix;

			/******************************************************
			 *  GENERATE TABLE - FULL MULTI-TABLE CACHE
			 *****************************************************/
			-- Create objects if they dont exist or if resource should be created in DB
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
				prefix||&apos;Creating DDL table script for cache table &apos; || prefixResourceName); 

			IF (POSITION(CachingDataRow.CACHE_TYPE IN CACHE_TYPE_FULL_MULTI) &gt; 0) THEN 
				-- Get the bucket attributres from cache data row
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;MULTI_BUCKET_CATALOG&apos;, attributes, StorageBucketCatalog);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;MULTI_BUCKET_SCHEMA&apos;, attributes, StorageBucketSchema);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;MULTI_BUCKET_TABLE_PREFIX&apos;, attributes, StorageBucketPrefix);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;MULTI_NUM_BUCKETS&apos;, attributes, StorageBucketNumBuckets);

				-- Validate the buckets
				IF (StorageBucketCatalog IS NULL OR POSITION(&apos;$DEFAULT_CATALOG_NAME&apos; IN StorageBucketCatalog) &gt; 0) THEN
					SET StorageBucketCatalog = datasourceCatalogName;		-- Default to constants
				END IF;
				IF (StorageBucketSchema IS NULL OR POSITION(&apos;$DEFAULT_SCHEMA_NAME&apos; IN StorageBucketSchema) &gt; 0) THEN
					SET StorageBucketSchema = datasourceSchemaName;			-- Default to constants
				END IF;
				IF (StorageBucketPrefix IS NULL OR POSITION(&apos;$DEFAULT_RES_NAME&apos; IN StorageBucketPrefix) &gt; 0) THEN
					SET StorageBucketPrefix = cachingPrefix || resourceNameUPPER || cachingSuffix;	 -- Default to dynamic extraction of table name
				END IF;
				IF (StorageBucketNumBuckets IS NULL OR StorageBucketNumBuckets &lt;= 0) THEN
					SET StorageBucketNumBuckets = 3;						-- Default to 3 buckets when &lt;= 0
				END IF;

				-- Loop through the number of buckets to create the DDL for each bucket.
				SET i = 1;
				WHILE (i &lt;= StorageBucketNumBuckets) DO
					SET prefixResourceName = StorageBucketPrefix||CAST((i-1) AS VARCHAR);

					/****************************************************** 
					 * GENERATE DDL
					 *****************************************************/
					/*	GenerateCacheScriptsDDL(
						IN  sequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
						IN  origUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
						IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
						IN inResourcePath 			VARCHAR(2048), 
						IN inCatalogName			VARCHAR(255),
						IN inSchemaName				VARCHAR(255),
						IN inResourceName 			VARCHAR(255), 
						IN inCacheType				VARCHAR,
						IN inAttributes			 	VARCHAR(2048), 
						OUT outGetResourceDDL 		VARCHAR(32768),
						OUT errStatus 				VARCHAR,
						OUT errMessage				LONGVARCHAR           */
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsDDL (
								sequenceNum, 
								origUserName, 
								constantsPath,
								resourcePath,
								StorageBucketCatalog,  
								StorageBucketSchema,
								prefixResourceName, 
								CachingDataRow.CACHE_TYPE,
								attributes,
								tableSQL, 
								errStatus,
								errMessage);
					IF errStatus = &apos;SUCCESS&apos; AND LENGTH(tableSQL) &gt; 0 THEN
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
							prefix||&apos;Successfully created DDL table script for cache table &apos; || prefixResourceName); 
					ELSE
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
								VALUE prefix||&apos;Failed DDL script creation failed for &apos; || prefixResourceName||&apos;  ERROR=&apos;||emptyStr(errMessage);
					END IF;  

					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
							prefix||&apos;Creating cache table for resource &apos; || prefixResourceName);

					/****************************************************** 
					 * EXECUTE DDL
					 *****************************************************/
					CALL/shared/ASAssets/CacheManagement/CacheFramework/Scripts/ExecuteDDL(sequenceNum, origUserName, constantsPath, prefixResourceName, tableSQL, cachekey, prefix, errStatus, errMessage);
						
					IF errStatus = &apos;SUCCESS&apos; THEN		
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
								prefix||&apos;Successfully created cache table for &apos; || prefixResourceName);
					ELSE 
							--CALL PRINT (&apos;Table creation failed..exiting.&apos;);
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE
								prefix||&apos;Failed cache table creation for &apos; || prefixResourceName||&apos;  Error=&apos;||emptyStr(errMessage);
					END IF;   

					/****************************************************** 
					 * CREATE INDEXES - APPLIES TO ANY CACHE TYPE
					 *****************************************************/
					IF (IndexSupported) THEN
						-- Create indexes for the cache table
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
							prefix||&apos;Create indexes for cache table &apos; || prefixResourceName); 

						/* 	CreateIndexConfigure(
							IN  sequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
							IN  origUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
							IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
							IN resourcePath				VARCHAR(4096),
							IN catalogName				VARCHAR,
							IN schemaName				VARCHAR,
							IN tableName	 			VARCHAR,
							IN tablePrefix				VARCHAR,
							IN cacheType				VARCHAR,
							IN attributes				LONGVARCHAR,
							OUT errStatus 				VARCHAR     */
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/CreateIndexConfigure(
								sequenceNum, 
								origUserName,
								constantsPath,
								resourcePath, 
								datasourceCatalogName,
								datasourceSchemaName,
								resourceNameUPPER,
								cachingPrefix, 
								prefixResourceName,			-- multi-table name filter for creating indexes for a specific table.  Null to create all indexes for all tables.
								CachingDataRow.CACHE_TYPE,
								attributes,
								errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
								prefix||&apos;Successfully created indexes for cache table &apos; || prefixResourceName); 
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to create indexes for &apos; || prefixResourceName;
						END IF;  
					END IF;
					/****************************************************** 
					 * INTROSPECT CACHE TABLE
					 *****************************************************/
					/* IntrospectTables(
						IN  inSequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
						IN  inOrigUserName				VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.
						IN  constantsPath 				VARCHAR(4096),
						IN  datasourcePath 				VARCHAR(4096),
						IN  catalogName 				VARCHAR,
						IN  schemaName 					VARCHAR,
						IN  tableName 					VARCHAR,
						IN  debugLoggingTypeOverride	VARCHAR,		-- NULL or override the constants procedure debugLoggingType to avoid exceptions being thrown when &quot;DB&quot; is configured.
						OUT errStatus 					VARCHAR,
						OUT errMessage 					LONGVARCHAR      */
					-- Introspect the data source table
					CALL  /shared/ASAssets/CacheManagement/CacheFramework/Scripts/IntrospectTables(
							sequenceNum, 
							origUserName,
							constantsPath, 
							datasourcePath, 
							datasourceCatalogName, 
							datasourceSchemaName, 
							prefixResourceName, 
							NULL,
							errStatus, 
							errMessage);
					IF errStatus = &apos;SUCCESS&apos; THEN		
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
								prefix||&apos;Sucessfully introspected cache table for &apos; || prefixResourceName);
					ELSE 
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE
								&apos;Failed introspection of cache table for &apos; || prefixResourceName;
					END IF;

					SET i = i + 1;
				END WHILE;
			/******************************************************
			 * GENERATE TABLE - ALL OTHER CACHE TYPES 
			 *****************************************************/
			ELSE -- All other cache types
				SET prefixResourceName = cachingPrefix || resourceNameUPPER || cachingSuffix;

				/****************************************************** 
				 * GENERATE DDL
				 *****************************************************/
				/*	GenerateCacheScriptsDDL(
					IN  sequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
					IN  origUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
					IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
					IN inResourcePath 			VARCHAR(2048), 
					IN inCatalogName			VARCHAR(255),
					IN inSchemaName				VARCHAR(255),
					IN inResourceName 			VARCHAR(255), 
					IN inCacheType				VARCHAR,
					IN inAttributes			 	VARCHAR(2048), 
					OUT outGetResourceDDL 		VARCHAR(32768),
					OUT errStatus 				VARCHAR,
					OUT errMessage				LONGVARCHAR           */
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsDDL (
							sequenceNum, 
							origUserName, 
							constantsPath,
							resourcePath,  
							datasourceCatalogName,
							datasourceSchemaName,
							prefixResourceName, 
							CachingDataRow.CACHE_TYPE,
							attributes,
							tableSQL, 
							errStatus,
							errMessage);
				IF errStatus = &apos;SUCCESS&apos; AND LENGTH(tableSQL) &gt; 0 THEN
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
						prefix||&apos;Created DDL table script for cache table &apos; || prefixResourceName); 
				ELSE
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
							VALUE prefix||&apos;DDL script creation failed for &apos; || prefixResourceName||&apos;  ERROR=&apos;||emptyStr(errMessage);
				END IF;  

				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
						prefix||&apos;Creating cache table for resource &apos; || resourceName);

				/****************************************************** 
				 * EXECUTE DDL
				 *****************************************************/
				CALL/shared/ASAssets/CacheManagement/CacheFramework/Scripts/ExecuteDDL(sequenceNum, origUserName, constantsPath, prefixResourceName, tableSQL, cachekey, prefix, errStatus, errMessage);
					
				IF errStatus = &apos;SUCCESS&apos; THEN		
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
							prefix||&apos;Successfully created caching table &apos; || prefixResourceName || &apos;.&apos;);
				ELSE 
						--CALL PRINT (&apos;Table creation failed..exiting.&apos;);
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE
							prefix||&apos;Caching table creation for &apos; || prefixResourceName || &apos;  failed.  Error=&apos;||emptyStr(errMessage);
				END IF;   

				/****************************************************** 
				 * CREATE INDEXES - APPLIES TO ANY CACHE TYPE
				 *****************************************************/
				IF (IndexSupported) THEN
					-- Create indexes for the cache table
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
						prefix||&apos;Create indexes for cache table &apos; || prefixResourceName); 

					/* 	CreateIndexConfigure(
						IN  sequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
						IN  origUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
						IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
						IN resourcePath				VARCHAR(4096),
						IN catalogName				VARCHAR,
						IN schemaName				VARCHAR,
						IN tableName	 			VARCHAR,
						IN tablePrefix				VARCHAR,
						IN cacheType				VARCHAR,
						IN attributes				LONGVARCHAR,
						OUT errStatus 				VARCHAR     */
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/CreateIndexConfigure(
							sequenceNum,
							origUserName, 
							constantsPath,
							resourcePath, 
							datasourceCatalogName,
							datasourceSchemaName,
							resourceNameUPPER,
							cachingPrefix, 
							NULL,			-- multi-table name filter for creating indexes for a specific table.  Null to create all indexes for all tables.
							CachingDataRow.CACHE_TYPE,
							attributes,
							errStatus);
					IF errStatus = &apos;SUCCESS&apos; THEN
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
							prefix||&apos;Successfully created indexes for cache table &apos; || prefixResourceName); 
					ELSE
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
								VALUE prefix||&apos;Failed to create indexes for &apos; || prefixResourceName;
					END IF;  
				END IF;

				/****************************************************** 
				 * INTROSPECT CACHE TABLE
				 *****************************************************/
				/* IntrospectTables(
					IN  inSequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
					IN  inOrigUserName				VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.
					IN  constantsPath 				VARCHAR(4096),
					IN  datasourcePath 				VARCHAR(4096),
					IN  catalogName 				VARCHAR,
					IN  schemaName 					VARCHAR,
					IN  tableName 					VARCHAR,
					IN  debugLoggingTypeOverride	VARCHAR,		-- NULL or override the constants procedure debugLoggingType to avoid exceptions being thrown when &quot;DB&quot; is configured.
					OUT errStatus 					VARCHAR,
					OUT errMessage 					LONGVARCHAR      */
				-- Introspect the data source table
				CALL  /shared/ASAssets/CacheManagement/CacheFramework/Scripts/IntrospectTables(
						sequenceNum,
						origUserName,
						constantsPath, 
						datasourcePath, 
						datasourceCatalogName, 
						datasourceSchemaName, 
						prefixResourceName, 
						NULL,
						errStatus, 
						errMessage);
				IF errStatus = &apos;SUCCESS&apos; THEN		
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
							prefix||&apos;Successfully created caching table for &apos; || prefixResourceName || &apos;.&apos;);
				ELSE 
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE
							prefix||&apos;Caching table creation for &apos; || prefixResourceName || &apos; failed.&apos;;
				END IF;
			END IF;

			/******************************************************
			 * BEGIN: CREATE STAGING for HYBRID OR MERGE CACHING
			 *****************************************************/
			-- Check if Hybrid caching is enables, staging table will be required.
			IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllHybrid) &gt; 0 OR (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllMerge) &gt; 0 AND MergeSupported)) THEN 
				SET prefixResourceName = stagingPrefix || resourceNameUPPER || stagingSuffix;

				-- generate Staging table
				SET prefixResourceName = stagingPrefix || resourceNameUPPER || stagingSuffix;

				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
						prefix||&apos;Staging cache table does not exist for resource &apos; || resourceName || &apos;. creating DDL&apos;); 

				/****************************************************** 
				 * GENERATE DDL
				 *****************************************************/
			/*	GenerateCacheScriptsDDL(
				IN  sequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
				IN  origUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
				IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
				IN inResourcePath 			VARCHAR(2048), 
				IN inCatalogName			VARCHAR(255),
				IN inSchemaName				VARCHAR(255),
				IN inResourceName 			VARCHAR(255), 
				IN inCacheType				VARCHAR,
				IN inAttributes			 	VARCHAR(2048), 
				OUT outGetResourceDDL 		VARCHAR(32768),
				OUT errStatus 				VARCHAR,
				OUT errMessage				LONGVARCHAR           */
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsDDL (
						sequenceNum, 
						origUserName, 
						constantsPath,
						resourcePath, 
						datasourceCatalogName,
						datasourceSchemaName,
						prefixResourceName,  
						CachingDataRow.CACHE_TYPE,
						attributes,
						tableSQL,
						errStatus,
						errMessage);
				IF errStatus = &apos;SUCCESS&apos; AND LENGTH(tableSQL) &gt; 0 THEN
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
							prefix||&apos;Created DDL table script for staging table &apos; || prefixResourceName); 
				ELSE
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
							VALUE prefix||&apos;DDL script creation failed for &apos; || prefixResourceName||&apos;  ERROR=&apos;||emptyStr(errMessage);
				END IF;
				/****************************************************** 
				 * EXECUTE DDL
				 *****************************************************/
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/ExecuteDDL(sequenceNum, origUserName, constantsPath, prefixResourceName, tableSQL, cachekey, prefix, errStatus, errMessage);
				
				IF errStatus = &apos;SUCCESS&apos; THEN		
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
							prefix||&apos;Successfully created staging table for &apos; || prefixResourceName || &apos;.&apos;);
				ELSE 
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE
								prefix||&apos;Staging table creation for &apos; || prefixResourceName || &apos; failed.&apos;||&apos;  Error=&apos;||emptyStr(errMessage);
				END IF;

				/****************************************************** 
				 * INTROSPECT CACHE TABLE
				 *****************************************************/
				/* IntrospectTables(
					IN  inSequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
					IN  inOrigUserName				VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.
					IN  constantsPath 				VARCHAR(4096),
					IN  datasourcePath 				VARCHAR(4096),
					IN  catalogName 				VARCHAR,
					IN  schemaName 					VARCHAR,
					IN  tableName 					VARCHAR,
					IN  debugLoggingTypeOverride	VARCHAR,		-- NULL or override the constants procedure debugLoggingType to avoid exceptions being thrown when &quot;DB&quot; is configured.
					OUT errStatus 					VARCHAR,
					OUT errMessage 					LONGVARCHAR      */
				-- Introspect the data source table
				CALL  /shared/ASAssets/CacheManagement/CacheFramework/Scripts/IntrospectTables(
						sequenceNum, 
						origUserName,
						constantsPath, 
						datasourcePath, 
						datasourceCatalogName, 
						datasourceSchemaName, 
						prefixResourceName, 
						NULL,
						errStatus, 
						errMessage);
				IF errStatus = &apos;SUCCESS&apos; THEN		
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
							prefix||&apos;Successfully created staging table for &apos; || prefixResourceName || &apos;.&apos;);
				ELSE 
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE
							prefix||&apos;Staging table creation for &apos; || prefixResourceName || &apos; failed.&apos;;
				END IF;
			END IF;
			/******************************************************
			 * END: INCREMENTAL or HYBRID CACHING
			 *****************************************************/

		  END; -- END TRANSACTION

		END IF;
		SET loopCount = loopCount + 1;
	END FOR;
/******************************************************
 * END LOOP 1: GENERATE AND EXECUTE CACHE TABLE DDL
 *****************************************************/

/******************************************************
 * BEGIN LOOP 2: GENERATE AND CONFIGURE VIEW CACHE
 *****************************************************/
	SET loopCount = 1;
	-- Create caching scripts
	OPEN CachingDataCurs FOR CachingDataSelect;
	FOR CachingDataRow AS CachingDataCurs DO
	/****************************************************** 
	 * [DROP/RECREATE] DROP RECREATE CIS VIEW Y/N
	 *****************************************************/
		-- Get the full resource path and then extract the resource name from the path
		SET resourcePath = CachingDataRow.RESOURCE_PATH;
		CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;E&apos;, resourceName, parentPath);
		set resourceNameUPPER = UPPER(resourceName);

		-- Get the drop and recreate view flag
		SET dropRecreateViewYN = UPPER(convertYN(CachingDataRow.DROP_RECREATE_VIEW_YN));

		-- Test for whether MERGE is supported for the given database
		IF (NOT MergeSupported AND POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllMerge) &gt; 0) THEN
			-- FORCE TO NO WHEN MERGE NOT SUPPORTED - Drop database cache and staging tables if applicable and they exist
			SET dropRecreateViewYN = &apos;N&apos;;
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath,
					prefix||&apos;Generate cache scripts abandoned due to MERGE Type not supported for database type (&apos;||constantsType||&apos;) on resource=&apos; || resourcePath);
		END IF;

		IF dropRecreateViewYN = &apos;Y&apos; THEN 
			-- get the attributes
			SET attributes = CachingDataRow.ATTRIBUTES; 

			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath,
					prefix||&apos;VIEW_GEN_LOOP=&apos;||loopCount||&apos;  Start cache framework View/Proc generation for resource=&apos; || resourcePath);

		/******************************************************
		 * CREATE VARIOUS TARGET SCRIPT AND/OR STAGING FOLDERS
		 *****************************************************/
		  BEGIN INDEPENDENT TRANSACTION
			-- For Incremental, Hybrid or Merge caching, create the application incremental scripts folder.
			IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllIncremental) &gt; 0) THEN 

				CALL /lib/resource/ResourceExists(applicationIncrScriptsPath, &apos;CONTAINER&apos;, NULL, resExists); 
				IF (NOT resExists) THEN 
					/* createAllFoldersPrivileges(
						IN sourceFolderPath 			/shared/ASAssets/Utilities/TypeDefinitions.pathType,
						IN updatePrivilegesRecursively	BIT - flag indicating whether to update the children of the given resources or not.
							-- null (default) - do not set any privileges at all.
							-- 0 (false) - only update privileges for the given resource and not the children.
							-- 1 (true) - update privileges for children recursively
						IN copyPrivilegeMode			BIT - flag indicating the mode in which to copy privileges
							-- null (default) - do not set any privileges at all
							-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
							-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
						OUT success						BIT,
						OUT faultResponse				XML) */
					CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(applicationIncrScriptsPath, 1, 1, success, faultResponse);
					IF (faultResponse IS NOT NULL) THEN
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned
								VALUE prefix||&apos;Error creating folders with privileges for path=&apos;||emptyStr(applicationIncrScriptsPath)||&apos;  ERROR=&apos;||CAST(faultResponse AS LONGVARCHAR);
					END IF;
				END IF;
			END IF;

			-- For Hybrid or Merge caching, create the application staging view folder.
			IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllHybrid) &gt; 0 OR (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllMerge) &gt; 0 AND MergeSupported)) THEN 
				CALL /lib/resource/ResourceExists(applicationStageViewPath, &apos;CONTAINER&apos;, NULL, resExists); 
				IF (NOT resExists) THEN 
					/* createAllFoldersPrivileges(
						IN sourceFolderPath 			/shared/ASAssets/Utilities/TypeDefinitions.pathType,
						IN updatePrivilegesRecursively	BIT - flag indicating whether to update the children of the given resources or not.
							-- null (default) - do not set any privileges at all.
							-- 0 (false) - only update privileges for the given resource and not the children.
							-- 1 (true) - update privileges for children recursively
						IN copyPrivilegeMode			BIT - flag indicating the mode in which to copy privileges
							-- null (default) - do not set any privileges at all
							-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
							-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
						OUT success						BIT,
						OUT faultResponse				XML) */
					CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(applicationStageViewPath, 1, 1, success, faultResponse);
					IF (faultResponse IS NOT NULL) THEN
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned
								VALUE prefix||&apos;Error creating folders with privileges for path=&apos;||emptyStr(applicationStageViewPath)||&apos;  ERROR=&apos;||CAST(faultResponse AS LONGVARCHAR);
					END IF;
				END IF;
			END IF;

			-- For Full caching, create call-back and call-back implementation scripts folder
			IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllFull) &gt; 0) THEN 
				CALL /lib/resource/ResourceExists(applicationCacheProcPath, &apos;CONTAINER&apos;, NULL, resExists); 
				IF (NOT resExists) THEN 
					/* createAllFoldersPrivileges(
						IN sourceFolderPath 			/shared/ASAssets/Utilities/TypeDefinitions.pathType,
						IN updatePrivilegesRecursively	BIT - flag indicating whether to update the children of the given resources or not.
							-- null (default) - do not set any privileges at all.
							-- 0 (false) - only update privileges for the given resource and not the children.
							-- 1 (true) - update privileges for children recursively
						IN copyPrivilegeMode			BIT - flag indicating the mode in which to copy privileges
							-- null (default) - do not set any privileges at all
							-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
							-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
						OUT success						BIT,
						OUT faultResponse				XML) */
					CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(applicationCacheProcPath, 1, 1, success, faultResponse);
					IF (faultResponse IS NOT NULL) THEN
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned
								VALUE prefix||&apos;Error creating folders with privileges for path=&apos;||emptyStr(applicationCacheProcPath)||&apos;  ERROR=&apos;||CAST(faultResponse AS LONGVARCHAR);
					END IF;
				END IF;	

				CALL /lib/resource/ResourceExists(applicationCacheProcImplPath, &apos;CONTAINER&apos;, NULL, resExists); 
				IF (NOT resExists) THEN 
					/* createAllFoldersPrivileges(
						IN sourceFolderPath 			/shared/ASAssets/Utilities/TypeDefinitions.pathType,
						IN updatePrivilegesRecursively	BIT - flag indicating whether to update the children of the given resources or not.
							-- null (default) - do not set any privileges at all.
							-- 0 (false) - only update privileges for the given resource and not the children.
							-- 1 (true) - update privileges for children recursively
						IN copyPrivilegeMode			BIT - flag indicating the mode in which to copy privileges
							-- null (default) - do not set any privileges at all
							-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
							-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
						OUT success						BIT,
						OUT faultResponse				XML) */
					CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(applicationCacheProcImplPath, 1, 1, success, faultResponse);
					IF (faultResponse IS NOT NULL) THEN
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned
								VALUE prefix||&apos;Error creating folders with privileges for path=&apos;||emptyStr(applicationCacheProcImplPath)||&apos;  ERROR=&apos;||CAST(faultResponse AS LONGVARCHAR);
					END IF;
				END IF;
			END IF;

			-- Create the CacheTriggers folder
			CALL /lib/resource/ResourceExists(applicationTriggersPath, &apos;CONTAINER&apos;, NULL, resExists); 
			IF (NOT resExists) THEN 
				/* createAllFoldersPrivileges(
					IN sourceFolderPath 			/shared/ASAssets/Utilities/TypeDefinitions.pathType,
					IN updatePrivilegesRecursively	BIT - flag indicating whether to update the children of the given resources or not.
						-- null (default) - do not set any privileges at all.
						-- 0 (false) - only update privileges for the given resource and not the children.
						-- 1 (true) - update privileges for children recursively
					IN copyPrivilegeMode			BIT - flag indicating the mode in which to copy privileges
						-- null (default) - do not set any privileges at all
						-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
						-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
					OUT success						BIT,
					OUT faultResponse				XML) */
				CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(applicationTriggersPath, 1, 1, success, faultResponse);
				IF (faultResponse IS NOT NULL) THEN
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned
							VALUE prefix||&apos;Error creating folders with privileges for path=&apos;||emptyStr(applicationTriggersPath)||&apos;  ERROR=&apos;||CAST(faultResponse AS LONGVARCHAR);
				END IF;
			END IF;
		  END; -- END Transaction

		  BEGIN INDEPENDENT TRANSACTION
			/******************************************************
			 * INCREMENTAL, HYBRID or MERGE CACHING
			 *****************************************************/
			IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllIncremental) &gt; 0) THEN 

				-- For Hybrid or Merge caching, drop/create the staging view.
				IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllHybrid) &gt; 0 OR POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllMerge) &gt; 0) THEN 
					SET prefixResourceName = stagingPrefix || resourceNameUPPER || stagingSuffix;

				/****************************************************** 
				 * [DROP] DROP RECREATE CIS VIEW - STAGING VIEW
				 *****************************************************/
					-- check if staging view exists. drop it if needed
					CALL /lib/resource/ResourceExists(applicationStageViewPath || &apos;/&apos; || prefixResourceName, resourceType, NULL, resExists); 
					IF (resExists) THEN 
						-- we only need caching script for incremental/hybrid caching 	
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath,  
								prefix||&apos;Dropping staging view &apos; || prefixResourceName );

						/* DropResource(
							IN  sequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
							IN  origUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
							IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
							IN  resourcePath 			VARCHAR(1000),
							IN  resourceType 			VARCHAR,
							IN debugLoggingTypeOverride	VARCHAR,		-- NULL or override the constants procedure debugLoggingType to avoid exceptions being thrown when &quot;DB&quot; is configured.
							OUT errStatus 				VARCHAR,
							OUT errMessage				LONGVARCHAR)  */
						-- resource found and we need to drop it.
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DropResource (
									sequenceNum,
									origUserName,
									constantsPath, 
									applicationStageViewPath || &apos;/&apos; || prefixResourceName,
									resourceType,
									NULL,
									errStatus,
									errMessage);
						IF errStatus = &apos;SUCCESS&apos; THEN
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath,  
										prefix||&apos;Dropped staging view &apos; || prefixResourceName );
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE
									prefix||&apos;Unable to drop staging view &apos; || applicationStageViewPath || &apos;/&apos; || prefixResourceName || &apos; failed with message: &apos;||emptyStr(errMessage);
						END IF;
					END IF;

				/****************************************************** 
				 * [RECREATE] DROP RECREATE CIS VIEW - STAGING VIEW
				 *****************************************************/
					-- we only need caching script for incremental/hybrid caching 	
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath,  
								prefix||&apos;Creating staging view &apos; || prefixResourceName );
					/* CreateStagingView(
							IN  sequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
							IN  origUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
							IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
							IN  sourceViewName 			VARCHAR,
							IN  sourceViewPath 			VARCHAR,
							IN  targetViewPath 			VARCHAR,
							IN  targetViewNamePrefix 	VARCHAR,
							IN  targetViewNameSuffix	VARCHAR,
							OUT errStatus 				VARCHAR            */
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/CreateStagingView (
										sequenceNum, 
										origUserName,
										constantsPath,
										resourceNameUPPER, 	-- source View Name in upper case,
										parentPath, 		-- source View Path,
										applicationStageViewPath, 	-- Staging views folder path,
										stagingPrefix, 		-- staging view prefix
										stagingSuffix,		-- staging view suffix
										errStatus);
					
					IF errStatus = &apos;SUCCESS&apos; THEN
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath,  
									prefix||&apos;Created staging view &apos; || prefixResourceName );

						/****************************************************** 
						 * COPY PRIVILEGES FROM PARENT FOLDER
						 *****************************************************/
						-- Added MB July 2014
						-- Set privileges for staging view  
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (
								sequenceNum, origUserName, constantsPath, applicationStageViewPath || &apos;/&apos; || prefixResourceName, resourceType, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
									prefix||&apos;Privileges applied successfully for resource &apos; || applicationStageViewPath || &apos;/&apos; || prefixResourceName);
						ELSE
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
									prefix||&apos;Failed to apply privileges for resource &apos; || applicationStageViewPath || &apos;/&apos; || prefixResourceName);				
						END IF;
					ELSE
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE
									&apos;Staging view creation for &apos; || resourceNameUPPER || &apos; failed.&apos;;
					END IF;

					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath,  
							prefix||&apos;Starting generation caching scripts for &apos; || resourceName || &apos;.&apos;);
				END IF;

			/****************************************************** 
			 * [RECREATE] DROP RECREATE CIS VIEW - INCR LOAD SCRIPTS
			 *****************************************************/
				/****************************************************** 
				 * BEGIN: GENERATE LOAD SCRIPTS - HYBRID w/ DELTA STAGE
				 *****************************************************/
				-- For Hybrid Staging caching with the same script for initial and delta
				IF (POSITION(CachingDataRow.CACHE_TYPE IN CACHE_TYPE_HYBRID_DS) &gt; 0) THEN 
					/* GenerateCacheScriptsHybridDeltaStage(
						IN  sequenceNum					BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
						IN  origUserName				VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
						IN  constantsPath 				VARCHAR(4096),	-- Path to the constants file
						IN  constantsPath				VARCHAR(4096),	-- Path to the constants file
						IN	viewPath					VARCHAR(4096),	-- Path to the view being cached
						IN	targetPath					VARCHAR(4096),	-- Path to the target database table associated with the cache view
						IN	stageViewPath				VARCHAR(4096),	-- Path to the staging view
						IN	scriptPath					VARCHAR(4096),	-- Path to the scripts directory
						IN  cacheType					VARCHAR,		-- The cache type
						IN  attributes					VARCHAR(32768),	-- Attributes containing incremental parameters
						OUT firstRefreshScriptPath		VARCHAR(2048),	-- Returns the firstRefreshScript Path (a.k.a. pre-callback procedure)
						OUT secondRefreshScriptPath 	VARCHAR(2048),	-- Returns the secondRefreshScript Path (a.k.a. post-callback procedure)
						OUT errStatus 					VARCHAR        */
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsHybridDeltaStage(
								sequenceNum, 
								origUserName, 
								constantsPath,
								resourcePath,
								datasourceFullPath || &apos;/&apos; || cachingPrefix || resourceNameUPPER || cachingSuffix,
								applicationStageViewPath  || &apos;/&apos; || stagingPrefix || resourceNameUPPER || stagingSuffix,
								applicationIncrScriptsPath, 
								CachingDataRow.CACHE_TYPE,
								attributes,
								firstRefreshScriptPath, 
								secondRefreshScriptPath, 
								errStatus);
					IF errStatus != &apos;SUCCESS&apos; THEN
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned VALUE
							prefix||&apos;Hybrid Delta Staging &quot;&apos;||CachingDataRow.CACHE_TYPE||&apos;&quot; script creation failed for resource &apos; || resourcePath;
					ELSE
						/****************************************************** 
						 * COPY PRIVILEGES FROM PARENT FOLDER
						 *****************************************************/
						-- Set privileges for firstRefreshScriptPath  
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum, origUserName, constantsPath, firstRefreshScriptPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(firstRefreshScriptPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || firstRefreshScriptPath);				
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || firstRefreshScriptPath;
						END IF;
					END IF;
				END IF;
				/****************************************************** 
				 * END: GENERATE LOAD SCRIPTS - HYBRID w/ DELTA STAGE
				 *****************************************************/

				/****************************************************** 
				 * BEGIN: GENERATE LOAD SCRIPTS - HYBRID w/ NO DELTA STAGE
				 *****************************************************/
				-- For Hybrid No-Staging for delta caching with the different scripts for initial and delta
				IF (POSITION(CachingDataRow.CACHE_TYPE IN CACHE_TYPE_HYBRID_DNS) &gt; 0) THEN 
					SET prefixResourceName = stagingPrefix || resourceNameUPPER || stagingSuffix;

					/* GenerateCacheScriptsHybridDeltaStage(
						IN  sequenceNum					BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
						IN  origUserName				VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
						IN  constantsPath 				VARCHAR(4096),	-- Path to the constants file
						IN  constantsPath				VARCHAR(4096),	-- Path to the constants file
						IN	viewPath					VARCHAR(4096),	-- Path to the view being cached
						IN	targetPath					VARCHAR(4096),	-- Path to the target database table associated with the cache view
						IN	stgViewPath					VARCHAR(4096),	-- Path to the staging view
						IN	scriptPath					VARCHAR(4096),	-- Path to the scripts directory
						IN  cacheType					VARCHAR,		-- The cache type
						IN  attributes					VARCHAR(32768),	-- Attributes containing incremental parameters
						OUT firstRefreshScriptPath		VARCHAR(2048),	-- Returns the firstRefreshScript Path (a.k.a. pre-callback procedure)
						OUT secondRefreshScriptPath 	VARCHAR(2048),	-- Returns the secondRefreshScript Path (a.k.a. post-callback procedure)
						OUT errStatus 					VARCHAR    */
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsHybridDeltaNoStage(
								sequenceNum, 
								origUserName, 
								constantsPath,
								resourcePath,
								datasourceFullPath || &apos;/&apos; || cachingPrefix || resourceNameUPPER || cachingSuffix,
								applicationStageViewPath  || &apos;/&apos; || stagingPrefix || resourceNameUPPER || stagingSuffix,
								applicationIncrScriptsPath, 
								CachingDataRow.CACHE_TYPE,
								attributes,
								firstRefreshScriptPath, 
								secondRefreshScriptPath, 
								errStatus);
					IF errStatus != &apos;SUCCESS&apos; THEN
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned VALUE
							prefix||&apos;Hybrid Delta No-Staging &quot;&apos;||CachingDataRow.CACHE_TYPE||&apos;&quot; script creation failed for resource &apos; || resourcePath;
					ELSE
						/****************************************************** 
						 * COPY PRIVILEGES FROM PARENT FOLDER
						 *****************************************************/
						-- Set privileges for firstRefreshScriptPath  
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum,origUserName,  constantsPath, firstRefreshScriptPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(firstRefreshScriptPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || firstRefreshScriptPath);
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || firstRefreshScriptPath;
						END IF;
						-- Set privileges for secondRefreshScriptPath  
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum, origUserName, constantsPath, secondRefreshScriptPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(secondRefreshScriptPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || secondRefreshScriptPath);
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || secondRefreshScriptPath;
						END IF;
					END IF;
				END IF;
				/****************************************************** 
				 * END: GENERATE LOAD SCRIPTS - HYBRID w/ NO DELTA STAGE
				 *****************************************************/

				/****************************************************** 
				 * BEGIN: GENERATE LOAD SCRIPTS - INCREMENTAL
				 *****************************************************/
				-- For Incrementa caching with the different scripts for initial and delta
				IF (POSITION(CachingDataRow.CACHE_TYPE IN CACHE_TYPE_INCREMENTAL) &gt; 0) THEN 
					/* GenerateCacheScriptsIncremental(
						IN  sequenceNum					BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
						IN  origUserName				VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
						IN  constantsPath 				VARCHAR(4096),	-- Path to the constants file
						IN  constantsPath				VARCHAR(4096),	-- Path to the constants file
						IN	viewPath					VARCHAR(4096),	-- Path to the view being cached
						IN	targetPath					VARCHAR(4096),	-- Path to the target database table associated with the cache view
						IN	scriptPath					VARCHAR(4096),	-- Path to the scripts directory
						IN  cacheType					VARCHAR,		-- The cache type
						IN  attributes					VARCHAR(32768),	-- Attributes containing incremental parameters
						OUT firstRefreshScriptPath		VARCHAR(2048),	-- Returns the first Refresh Script Path (a.k.a. pre-callback procedure)
						OUT secondRefreshScriptPath 	VARCHAR(2048),	-- Returns the second Refresh Script Path (a.k.a. post-callback procedure)
						OUT errStatus 					VARCHAR        */
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsIncremental(
								sequenceNum, 
								origUserName, 
								constantsPath,
								resourcePath,
								datasourceFullPath || &apos;/&apos; || cachingPrefix || resourceNameUPPER || cachingSuffix,
								applicationIncrScriptsPath, 
								CachingDataRow.CACHE_TYPE,
								attributes,
								firstRefreshScriptPath, 
								secondRefreshScriptPath, 
								errStatus);
					IF errStatus != &apos;SUCCESS&apos; THEN
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned VALUE
							prefix||&apos;Incremental &quot;&apos;||CachingDataRow.CACHE_TYPE||&apos;&quot; script creation failed for resource &apos; || resourcePath;
					ELSE
						/****************************************************** 
						 * COPY PRIVILEGES FROM PARENT FOLDER
						 *****************************************************/
						-- Set privileges for firstRefreshScriptPath  
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum, origUserName, constantsPath, firstRefreshScriptPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(secondRefreshScriptPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || firstRefreshScriptPath);				
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || firstRefreshScriptPath;
						END IF;
						-- Set privileges for secondRefreshScriptPath  
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum, origUserName, constantsPath, secondRefreshScriptPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(secondRefreshScriptPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || secondRefreshScriptPath);
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || secondRefreshScriptPath;
						END IF;
					END IF;
				END IF;
				/****************************************************** 
				 * END: GENERATE LOAD SCRIPTS - INCREMENTAL
				 *****************************************************/

				/****************************************************** 
				 * BEGIN: GENERATE LOAD SCRIPTS - HYBRID MERGE TYPE 1
				 *****************************************************/
				-- For Hybrid Merge for delta caching with the different scripts for initial and delta
				IF (MergeSupported AND POSITION(CachingDataRow.CACHE_TYPE IN CACHE_TYPE_MERGE_TYPE1) &gt; 0) THEN 
					SET prefixResourceName = stagingPrefix || resourceNameUPPER || stagingSuffix;

					/* GenerateCacheScriptsHybridDeltaMergeType1(
						IN  sequenceNum					BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
						IN  origUserName				VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
						IN  constantsPath 				VARCHAR(4096),	-- Path to the constants file
						IN  constantsPath				VARCHAR(4096),	-- Path to the constants file
						IN	viewPath					VARCHAR(4096),	-- Path to the view being cached
						IN	targetPath					VARCHAR(4096),	-- Path to the target database table associated with the cache view
						IN	stgViewPath					VARCHAR(4096),	-- Path to the staging view
						IN  stageDatabasePath			VARCHAR(4096),	-- Path to the staging database table
						IN	scriptPath					VARCHAR(4096),	-- Path to the scripts directory
						IN  cacheType					VARCHAR,		-- The cache type
						IN  attributes					VARCHAR(32768),	-- Attributes containing incremental parameters
						OUT firstRefreshScriptPath		VARCHAR(2048),	-- Returns the firstRefreshScript Path (a.k.a. pre-callback procedure)
						OUT secondRefreshScriptPath 	VARCHAR(2048),	-- Returns the secondRefreshScript Path (a.k.a. post-callback procedure)
						OUT errStatus 					VARCHAR    */
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsHybridDeltaMergeType1(
								sequenceNum, 
								origUserName, 
								constantsPath,
								resourcePath,
								datasourceFullPath || &apos;/&apos; || cachingPrefix || resourceNameUPPER || cachingSuffix,
								applicationStageViewPath  || &apos;/&apos; || stagingPrefix || resourceNameUPPER || stagingSuffix,
								datasourceFullPath || &apos;/&apos; || stagingPrefix || resourceNameUPPER || stagingSuffix,
								applicationIncrScriptsPath, 
								CachingDataRow.CACHE_TYPE,
								attributes,
								firstRefreshScriptPath, 
								secondRefreshScriptPath, 
								errStatus);
					IF errStatus != &apos;SUCCESS&apos; THEN
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned VALUE
							prefix||&apos;Hybrid Merge Table &quot;&apos;||CachingDataRow.CACHE_TYPE||&apos;&quot; script creation failed for resource &apos; || resourcePath;
					ELSE
						/****************************************************** 
						 * COPY PRIVILEGES FROM PARENT FOLDER
						 *****************************************************/
						-- Set privileges for firstRefreshScriptPath  
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum,origUserName,  constantsPath, firstRefreshScriptPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(firstRefreshScriptPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || firstRefreshScriptPath);
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || firstRefreshScriptPath;
						END IF;
						-- Set privileges for secondRefreshScriptPath  
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum, origUserName, constantsPath, secondRefreshScriptPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(secondRefreshScriptPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || secondRefreshScriptPath);
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || secondRefreshScriptPath;
						END IF;
					END IF;
				END IF;
				/****************************************************** 
				 * END: GENERATE LOAD SCRIPTS - HYBRID MERGE TYPE 1
				 *****************************************************/

				/****************************************************** 
				 * BEGIN: GENERATE LOAD SCRIPTS - HYBRID MERGE TYPE 2
				 *****************************************************/
				-- For Hybrid Merge for delta caching with the different scripts for initial and delta
				IF (MergeSupported AND POSITION(CachingDataRow.CACHE_TYPE IN CACHE_TYPE_MERGE_TYPE2) &gt; 0) THEN 
					SET prefixResourceName = stagingPrefix || resourceNameUPPER || stagingSuffix;

					/* GenerateCacheScriptsHybridDeltaMergeType2(
						IN  sequenceNum					BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
						IN  origUserName				VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
						IN  constantsPath 				VARCHAR(4096),	-- Path to the constants file
						IN  constantsPath				VARCHAR(4096),	-- Path to the constants file
						IN	viewPath					VARCHAR(4096),	-- Path to the view being cached
						IN	targetPath					VARCHAR(4096),	-- Path to the target database table associated with the cache view
						IN	stgViewPath					VARCHAR(4096),	-- Path to the staging view
						IN  stageDatabasePath			VARCHAR(4096),	-- Path to the staging database table
						IN	scriptPath					VARCHAR(4096),	-- Path to the scripts directory
						IN  cacheType					VARCHAR,		-- The cache type
						IN  attributes					VARCHAR(32768),	-- Attributes containing incremental parameters
						OUT firstRefreshScriptPath		VARCHAR(2048),	-- Returns the firstRefreshScript Path (a.k.a. pre-callback procedure)
						OUT secondRefreshScriptPath 	VARCHAR(2048),	-- Returns the secondRefreshScript Path (a.k.a. post-callback procedure)
						OUT errStatus 					VARCHAR    */

					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsHybridDeltaMergeType2(
								sequenceNum, 
								origUserName, 
								constantsPath,
								resourcePath,
								datasourceFullPath || &apos;/&apos; || cachingPrefix || resourceNameUPPER || cachingSuffix,
								applicationStageViewPath  || &apos;/&apos; || stagingPrefix || resourceNameUPPER || stagingSuffix,
								datasourceFullPath || &apos;/&apos; || stagingPrefix || resourceNameUPPER || stagingSuffix,
								applicationIncrScriptsPath, 
								CachingDataRow.CACHE_TYPE,
								attributes,
								firstRefreshScriptPath, 
								secondRefreshScriptPath, 
								errStatus);
					IF errStatus != &apos;SUCCESS&apos; THEN
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned VALUE
							prefix||&apos;Hybrid Merge Column &quot;&apos;||CachingDataRow.CACHE_TYPE||&apos;&quot; script creation failed for resource &apos; || resourcePath;
					ELSE
						/****************************************************** 
						 * COPY PRIVILEGES FROM PARENT FOLDER
						 *****************************************************/
						-- Set privileges for firstRefreshScriptPath  
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum,origUserName,  constantsPath, firstRefreshScriptPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(firstRefreshScriptPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || firstRefreshScriptPath);
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || firstRefreshScriptPath;
						END IF;
						-- Set privileges for secondRefreshScriptPath  
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum, origUserName, constantsPath, secondRefreshScriptPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(secondRefreshScriptPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || secondRefreshScriptPath);
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || secondRefreshScriptPath;
						END IF;
					END IF;
				END IF;
				/****************************************************** 
				 * END: GENERATE LOAD SCRIPTS - HYBRID MERGE TYPE 2
				 *****************************************************/

				/****************************************************** 
				 * BEGIN: GENERATE LOAD SCRIPTS - HYBRID MERGE TYPE 4
				 *****************************************************/
				-- For Hybrid Merge for delta caching with the different scripts for initial and delta
				IF (MergeSupported AND POSITION(CachingDataRow.CACHE_TYPE IN CACHE_TYPE_MERGE_TYPE4) &gt; 0) THEN 
					SET prefixResourceName = stagingPrefix || resourceNameUPPER || stagingSuffix;

					/* GenerateCacheScriptsHybridDeltaMergeType4(
						IN  sequenceNum					BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
						IN  origUserName				VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
						IN  constantsPath 				VARCHAR(4096),	-- Path to the constants file
						IN  constantsPath				VARCHAR(4096),	-- Path to the constants file
						IN	viewPath					VARCHAR(4096),	-- Path to the view being cached
						IN	targetPath					VARCHAR(4096),	-- Path to the target database table associated with the cache view
						IN	stgViewPath					VARCHAR(4096),	-- Path to the staging view
						IN  stageDatabasePath			VARCHAR(4096),	-- Path to the staging database table
						IN	scriptPath					VARCHAR(4096),	-- Path to the scripts directory
						IN  cacheType					VARCHAR,		-- The cache type
						IN  attributes					VARCHAR(32768),	-- Attributes containing incremental parameters
						OUT firstRefreshScriptPath		VARCHAR(2048),	-- Returns the firstRefreshScript Path (a.k.a. pre-callback procedure)
						OUT secondRefreshScriptPath 	VARCHAR(2048),	-- Returns the secondRefreshScript Path (a.k.a. post-callback procedure)
						OUT errStatus 					VARCHAR    */
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsHybridDeltaMergeType4(
								sequenceNum, 
								origUserName, 
								constantsPath,
								resourcePath,
								datasourceFullPath || &apos;/&apos; || cachingPrefix || resourceNameUPPER || cachingSuffix,
								applicationStageViewPath  || &apos;/&apos; || stagingPrefix || resourceNameUPPER || stagingSuffix,
								datasourceFullPath || &apos;/&apos; || stagingPrefix || resourceNameUPPER || stagingSuffix,
								applicationIncrScriptsPath, 
								CachingDataRow.CACHE_TYPE,
								attributes,
								firstRefreshScriptPath, 
								secondRefreshScriptPath, 
								errStatus);
					IF errStatus != &apos;SUCCESS&apos; THEN
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned VALUE
							prefix||&apos;Hybrid Merge Column &quot;&apos;||CachingDataRow.CACHE_TYPE||&apos;&quot; script creation failed for resource &apos; || resourcePath;
					ELSE
						/****************************************************** 
						 * COPY PRIVILEGES FROM PARENT FOLDER
						 *****************************************************/
						-- Set privileges for firstRefreshScriptPath  
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum,origUserName,  constantsPath, firstRefreshScriptPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(firstRefreshScriptPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || firstRefreshScriptPath);
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || firstRefreshScriptPath;
						END IF;
						-- Set privileges for secondRefreshScriptPath  
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum, origUserName, constantsPath, secondRefreshScriptPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(secondRefreshScriptPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || secondRefreshScriptPath);
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || secondRefreshScriptPath;
						END IF;
					END IF;
				END IF;
				/****************************************************** 
				 * END: GENERATE LOAD SCRIPTS - HYBRID MERGE TYPE 4
				 *****************************************************/

		/******************************************************
		 * END: [RECREATE] DROP RECREATE CIS VIEW - INCR LOAD SCRIPTS
		 *****************************************************/

		/****************************************************** 
		 * BEGIN: [RECREATE] DROP RECREATE CIS VIEW - CALLBACK SCRIPTS
		 *****************************************************/
			ELSE

			/******************************************************
			 * BEGIN: FULL CACHING [SINGLE/MULTI-TABLE] CALL BACK SCRIPTS
			 *****************************************************/
				/* GenerateCacheScriptsFullCallback:
					IN  sequenceNum					BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
					IN  origUserName				VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
					IN  constantsPath 				VARCHAR(4096),	-- Path to the constants file
					IN  viewPath					VARCHAR(4096),	-- This is the full path to the view.
					IN	viewName					VARCHAR(255),	-- This is the view name only which includes any prefixes added to the name
					IN  cacheType					VARCHAR,		-- The cache type
					IN  attributes					VARCHAR(32768),	-- The attributes provide addition configuration features
					OUT firstRefreshScriptPath		VARCHAR(2048),	-- Returns the firstRefreshScript Path (a.k.a. pre-callback procedure)
					OUT firstRefreshScriptImplPath	VARCHAR(2048),	-- Returns the first Refresh Implementation Script (a.k.a. pre-callback impl procedure)
					OUT secondRefreshScriptPath 	VARCHAR(2048),	-- Returns the secondRefreshScript Path (a.k.a. post-callback procedure)
					OUT secondRefreshScriptImplPath VARCHAR(2048),	-- Returns the second Refresh Implementation Script (a.k.a. post-callback impl procedure)
					OUT errStatus 					VARCHAR        	-- Returns the status message of SUCCESS or FAIL     */
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/GenerateCacheScriptsFullCallback(
						sequenceNum, 
						origUserName, 
						constantsPath, 
						resourcePath, 
						resourceNameUPPER, 
						CachingDataRow.CACHE_TYPE,
						attributes, 
						firstRefreshScriptPath, 
						firstRefreshScriptImplPath,
						secondRefreshScriptPath, 
						secondRefreshScriptImplPath,
						errStatus);
				IF errStatus != &apos;SUCCESS&apos; THEN
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned VALUE
						prefix||&apos;Full Cache &quot;&apos;||CachingDataRow.CACHE_TYPE||&apos;&quot; call-back script creation failed for resource &apos; || resourcePath;
				ELSE
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameUPPER, cachekey,  constantsPath,  
							prefix||&apos;Successfully generated full cache callback scripts for resource &apos; || resourcePath );

					/****************************************************** 
					 * COPY PRIVILEGES FROM PARENT FOLDER
					 *****************************************************/
					-- Set privileges for firstRefreshScriptPath  
					IF (firstRefreshScriptPath IS NOT NULL) THEN
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum, origUserName, constantsPath, firstRefreshScriptPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(firstRefreshScriptPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || firstRefreshScriptPath);				
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || firstRefreshScriptPath;
						END IF;
					END IF;
					-- Set privileges for firstRefreshScriptImplPath  
					IF (firstRefreshScriptImplPath IS NOT NULL) THEN
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum, origUserName, constantsPath, firstRefreshScriptImplPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(firstRefreshScriptImplPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || firstRefreshScriptImplPath);				
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || firstRefreshScriptImplPath;
						END IF;
					END IF;
					-- Set privileges for secondRefreshScriptPath  
					IF (secondRefreshScriptPath IS NOT NULL) THEN
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum, origUserName, constantsPath, secondRefreshScriptPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(secondRefreshScriptPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName,resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || secondRefreshScriptPath);
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || secondRefreshScriptPath;
						END IF;
					END IF;
					-- Set privileges for secondRefreshScriptImplPath  
					IF (secondRefreshScriptImplPath IS NOT NULL) THEN
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (sequenceNum, origUserName, constantsPath, secondRefreshScriptImplPath, &apos;PROCEDURE&apos;, &apos;N&apos;, errStatus);
						IF errStatus = &apos;SUCCESS&apos; THEN
							-- Extract resource name
							CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(secondRefreshScriptImplPath, &apos;R&apos;, &apos;/&apos;, 1, 0, resourceNameProc);
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceNameProc, cachekey,  constantsPath,  
									prefix||&apos;Privileges applied successfully for resource &apos; || secondRefreshScriptImplPath);
						ELSE
							RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned 
									VALUE prefix||&apos;Failed to apply privileges for resource &apos; || secondRefreshScriptImplPath;
						END IF;
					END IF;
				END IF;
			/******************************************************
			 * END: FULL CACHING [SINGLE/MULTI-TABLE] CALL BACK SCRIPTS
			 *****************************************************/
			END IF;
		/****************************************************** 
		 * END: [RECREATE] DROP RECREATE CIS VIEW - CALLBACK SCRIPTS
		 *****************************************************/

			/******************************************************
			 * BEGIN: UPDATE CACHE CONFIG - PRIMARY CACHE VIEW
			 *****************************************************/
			-- Configure caching.		
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath,  
					prefix||&apos;Configuring caching for view &apos; || resourceName);	
		
			/*	UpdateCacheConfiguration(
				IN  sequenceNum					BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
				IN  origUserName				VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
				IN  constantsPath 				VARCHAR(4096),	-- Path to the constants file
				IN  inResourcePath 				VARCHAR(2048),
				IN  inDSPath					VARCHAR,
				IN  inTargetTable				VARCHAR,
				IN  inCacheType					VARCHAR,
				IN  configureSchedule			BIT,			-- 1=allow schedule to be configured for cached views, 0=don&apos;t allow schedule to be configured for staging views.
				IN  inFirstRefreshScriptPath	VARCHAR(2048),
				IN  inSecondRefreshScriptPath 	VARCHAR(2048),
				IN  attributes					LONGVARCHAR,
				OUT errStatus					VARCHAR     */
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/UpdateCacheConfiguration(
							sequenceNum, 
							origUserName,
							constantsPath, 
							resourcePath,
							datasourcePath,
							datasourceFullPath || &apos;/&apos; || cachingPrefix || resourceNameUPPER || cachingSuffix,
							CachingDataRow.CACHE_TYPE,
							1, -- configure cache schedule
							firstRefreshScriptPath,
							secondRefreshScriptPath,
							attributes,
							errStatus);

			IF errStatus != &apos;SUCCESS&apos; THEN
				RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE
						prefix||&apos;Caching configuration failed for resource &apos; || resourceNameUPPER;
			END IF;
			/******************************************************
			 * END: UPDATE CACHE CONFIG - PRIMARY CACHE VIEW
			 *****************************************************/

			/******************************************************************
			 * BEGIN: UPDATE CACHE CONFIG - HYBRID OR MERGE CACHING [STAGING]
			 ******************************************************************/
			IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllHybrid) &gt; 0 OR (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllMerge) &gt; 0 AND MergeSupported)) THEN 
				SET prefixResourceName = stagingPrefix || resourceNameUPPER || stagingSuffix;

				-- Confgure caching of staging table.
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
						prefix||&apos;Configuring caching for staging view &apos; || prefixResourceName);	
				
				/****************************************************** 
				 * CONFIGURE CACHE - STAGING TABLE
				 *****************************************************/
				/*	UpdateCacheConfiguration(
						IN  sequenceNum					BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
						IN  origUserName				VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
						IN  constantsPath 				VARCHAR(4096),	-- Path to the constants file
						IN  inResourcePath 				VARCHAR(2048),
						IN  inDSPath					VARCHAR,
						IN  inTargetTable				VARCHAR,
						IN  inCacheType					VARCHAR,
						IN  configureSchedule			BIT,			-- 1=allow schedule to be configured for cached views, 0=don&apos;t allow schedule to be configured for staging views.
						IN  inFirstRefreshScriptPath	VARCHAR(2048),
						IN  inSecondRefreshScriptPath 	VARCHAR(2048),
						IN  attributes					LONGVARCHAR,
						OUT errStatus					VARCHAR     */
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/UpdateCacheConfiguration(
								sequenceNum,
								origUserName, 
								constantsPath, 
								applicationStageViewPath || &apos;/&apos; || prefixResourceName, -- path to staging table
								datasourcePath, -- path to data source
								datasourceFullPath || &apos;/&apos; || prefixResourceName,
								CACHE_TYPE_FULL_SINGLE, 	-- CACHE_TYPE
								0, 		-- don&apos;t configure schedule for staging view
								&apos;&apos;, 
								&apos;&apos;,
								attributes,
								errStatus);

				IF errStatus = &apos;SUCCESS&apos; THEN
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
						prefix||&apos;Configured caching for staging view &apos; || prefixResourceName);		
				ELSE
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE
							prefix||&apos;Caching configuration failed for resource &apos; || prefixResourceName;
				END IF;
			END IF;
			/******************************************************
			 * END: UPDATE CACHE CONFIG - HYBRID CACHING [STAGING]
			 *****************************************************/

			/******************************************************
			 *  BEGIN: COPY PRIVS - FULL MULTI-TABLE CACHE
			 *****************************************************/
			IF (POSITION(CachingDataRow.CACHE_TYPE IN CACHE_TYPE_FULL_MULTI) &gt; 0) THEN 
				-- Get the bucket attributres from cache data row
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;MULTI_BUCKET_TABLE_PREFIX&apos;, attributes, StorageBucketPrefix);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;MULTI_NUM_BUCKETS&apos;, attributes, StorageBucketNumBuckets);

				-- Validate the bucket attributes
				IF (StorageBucketPrefix IS NULL OR POSITION(&apos;$DEFAULT_RES_NAME&apos; IN StorageBucketPrefix) &gt; 0) THEN
					SET StorageBucketPrefix = cachingPrefix || resourceNameUPPER || cachingSuffix;	 -- Default to dynamic extraction of table name
				END IF;
				IF (StorageBucketNumBuckets IS NULL OR StorageBucketNumBuckets &lt;= 0) THEN
					SET StorageBucketNumBuckets = 3;						-- Default to 3 buckets when &lt;= 0
				END IF;

				-- Looop through the number of buckets to copy privileges for each bucket
				SET i = 1;
				WHILE (i &lt;= StorageBucketNumBuckets) DO
					SET prefixResourceName = StorageBucketPrefix||CAST((i-1) AS VARCHAR);

				 	-- COPY PRIVILEGES FROM PARENT FOLDER
					-- Set privileges for tables introspected earlier once for cache table.  
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (
							sequenceNum, origUserName, constantsPath, datasourceFullPath || &apos;/&apos; || prefixResourceName, resourceType, &apos;N&apos;, errStatus);
					IF errStatus = &apos;SUCCESS&apos; THEN
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
								prefix||&apos;Privileges applied successfully for resource &apos; || datasourceFullPath || &apos;/&apos; || prefixResourceName);
					ELSE
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
								prefix||&apos;Failed to apply privileges for resource &apos; || datasourceFullPath || &apos;/&apos; || prefixResourceName);				
					END IF;
					SET i = i + 1;
				END WHILE;
			/******************************************************
			 *  END: COPY PRIVS - FULL MULTI-TABLE CACHE
			 *****************************************************/

			ELSE

			/****************************************************** 
			 * BEGIN: COPY PRIVS - ALL OTHER CACHE TYPES
			 *****************************************************/
				 -- COPY PRIVILEGES FROM PARENT FOLDER
				SET prefixResourceName = cachingPrefix || resourceNameUPPER || cachingSuffix;

				-- Added MB July 2014
				-- Set privileges for tables introspected earlier once for cache table.  
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (
						sequenceNum, origUserName, constantsPath, datasourceFullPath || &apos;/&apos; || prefixResourceName, resourceType, &apos;N&apos;, errStatus);
				IF errStatus = &apos;SUCCESS&apos; THEN
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
							prefix||&apos;Privileges applied successfully for resource &apos; || datasourceFullPath || &apos;/&apos; || prefixResourceName);
				ELSE
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
							prefix||&apos;Failed to apply privileges for resource &apos; || datasourceFullPath || &apos;/&apos; || prefixResourceName);				
				END IF;
			END IF;
			/****************************************************** 
			 * END: COPY PRIVS - ALL OTHER CACHE TYPES
			 *****************************************************/

			/******************************************************
			 * BEGIN: COPY PRIVS - HYBRID OR MERGE CACHING
			 *****************************************************/
			IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllHybrid) &gt; 0 OR (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllMerge) &gt; 0 AND MergeSupported)) THEN 
				SET prefixResourceName = stagingPrefix || resourceNameUPPER || stagingSuffix;

				 -- COPY PRIVILEGES FROM PARENT FOLDER
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CopyPrivilegesFromParentFolder (
						sequenceNum, origUserName, constantsPath, datasourceFullPath || &apos;/&apos; || prefixResourceName, resourceType, &apos;N&apos;, errStatus);
				IF errStatus = &apos;SUCCESS&apos; THEN
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
						prefix||&apos;Privileges applied successfully for resource &apos; || datasourceFullPath || &apos;/&apos; || prefixResourceName);
			
				ELSE
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, prefixResourceName, cachekey,  constantsPath, 
						prefix||&apos;Failed to apply privileges for resource &apos; || datasourceFullPath || &apos;/&apos; || prefixResourceName);				
				END IF;
			END IF;
			/******************************************************
			 * END: COPY PRIVS HYBRID CACHING
			 *****************************************************/

			/******************************************************
			 * BEGIN: RESET MAINTENANCE LEVEL - INCR and HYBRID CACHING
			 *****************************************************/
			IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllIncremental) &gt; 0) THEN 
				/* ResetIncrMaintenanceLevel(
					IN  inSequenceNum			BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
					IN  inOrigUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.
					IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
					IN  resourcePath			VARCHAR(4096),	-- Path to the cached view to reset the maintenance level.
					OUT errStatus 				VARCHAR,		-- Status=SUCCESS or FAIL
					OUT errMessage 				LONGVARCHAR		-- Status message upon FAIL othwerwise NULL   )  */
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/ResetIncrMaintenanceLevel(
					sequenceNum,
					origUserName,
					constantsPath,
					resourcePath,
					errStatus,
					errMessage);
				IF errStatus = &apos;SUCCESS&apos; THEN
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
						prefix||&apos;Sucessfully Reset Incremental Maintenance Level for resource &apos; || resourcePath);			
				ELSE
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned VALUE 
						prefix||&apos;Failed to Reset Incremental Maintenance Level for resource &apos; || resourcePath || &apos;.   Error=&apos;||errMessage;				
				END IF;
			END IF;
			/******************************************************
			 * END: RESET MAINTENANCE LEVEL - INCR and HYBRID CACHING
			 *****************************************************/

			-- END OF TRANSACTION
			END;	

		/****************************************************** 
		 *  REFRESH TRIGGER GENERATION - Generate if configured
		 *****************************************************/
			-- Get the trigger schedule
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;REFRESH_MODE&apos;, attributes, refreshMode);
			IF (refreshMode IS NOT NULL AND refreshMode = &apos;TRIGGER&apos;) THEN
				SET triggerName = resourceNameUPPER || emptyStr(triggerNameSuffix);
				SET procedurePath = applicationRefreshCachePath;
				SET procedureParams = &apos;&apos;&apos;&apos;||resourcePath||&apos;&apos;&apos;&apos;;

				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;TRIGGER_START_TIME&apos;, attributes, timerStartTime);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;TRIGGER_PERIOD&apos;, attributes, timerPeriod);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;TRIGGER_COUNT&apos;, attributes, timerPeriodQty);

				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;TRIGGER_RECURRING_DAY&apos;, attributes, timerRecurringDay);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;TRIGGER_FROM_TIME_IN_A_DAY&apos;, attributes, timerFromTimeInADay);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;TRIGGER_END_TIME_IN_A_DAY&apos;, attributes, timerEndTimeInADay);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;TRIGGER_IS_CLUSTER&apos;, attributes, timerIsCluster);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;TRIGGER_ANNOTATION&apos;, attributes, triggerAnnotation);

				IF (dropRecreateViewYN = &apos;Y&apos;) THEN
					-- Determine if the trigger exists or not
					CALL /lib/resource/ResourceExists(applicationTriggersPath || &apos;/&apos; || triggerName , &apos;TRIGGER&apos;, NULL, resExists); 
					IF (resExists) THEN
						-- resource found and we need to drop it.
						BEGIN INDEPENDENT TRANSACTION
							CALL /shared/ASAssets/Utilities/repository/destroyResource(applicationTriggersPath, triggerName, &apos;TRIGGER&apos;, success, createResponse, faultResponse);
							IF (faultResponse IS NULL) THEN
								CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, triggerName, cachekey,  constantsPath, 
										prefix||&apos;Successfully destroyed refresh cache trigger &apos; || emptyStr(triggerName)); 
							ELSE
								RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned VALUE
										prefix||&apos;Unable to drop refresh cache trigger &apos; || applicationTriggersPath || &apos;/&apos; || triggerName || &apos;  failed.  ERROR: &apos;||CAST(faultResponse AS LONGVARCHAR);
							END IF;
						END;	
					END IF;

					-- Create trigger for caching
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, triggerName, cachekey,  constantsPath, 
							prefix||&apos;Creating/updating refresh cache trigger=[&apos;||triggerName||&apos;] resource for view &apos; || resourceNameUPPER);

					BEGIN INDEPENDENT TRANSACTION	
						CALL /shared/ASAssets/Utilities/repository/createResource(applicationTriggersPath, triggerName, &apos;TRIGGER&apos;, &apos;NONE&apos;, success, createResponse, faultResponse);
					END;

					-- Set up the trigger vector to be passed into updateTrigger()
					SET triggerAttrVect = VECTOR[
							(&apos;timerStartTime&apos;, 			CAST(timerStartTime AS VARCHAR)),
							(&apos;timerPeriod&apos;, 			timerPeriod),
							(&apos;timerPeriodQty&apos;, 			CAST(timerPeriodQty AS VARCHAR)),
							(&apos;timerRecurringDay&apos;, 		timerRecurringDay),
							(&apos;timerFromTimeInADay&apos;, 	CAST(timerFromTimeInADay AS VARCHAR)),
							(&apos;timerEndTimeInADay&apos;, 		CAST(timerEndTimeInADay AS VARCHAR)),
							(&apos;procedurePath&apos;, 			procedurePath),
							(&apos;procedureParams&apos;, 		procedureParams),
							(&apos;procedureExhaustCursors&apos;, &apos;0&apos;),
							(&apos;maxEventsQueued&apos;, 		&apos;1&apos;),
							(&apos;annotation&apos;, 				triggerAnnotation)
						];

					-- Update the trigger
					BEGIN INDEPENDENT TRANSACTION

						CALL /shared/ASAssets/Utilities/repository/updateTrigger(
								applicationTriggersPath||&apos;/&apos;||triggerName, -- fullResourcePath
								1, 				-- enabled
								&apos;TIMER&apos;, 		-- conditionType
								&apos;PROCEDURE&apos;, 	-- actionType,
								triggerAttrVect,
								NULL, 			-- attributeVect,		
								success,
								createResponse,
								faultResponse
							);
					END;
					IF (faultResponse IS NOT NULL) THEN
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE
							prefix||&apos;Failed to update refresh cache trigger=[&apos;|| applicationTriggersPath||&apos;/&apos;||triggerName || &apos;].   ERROR=&apos;||CAST(faultResponse AS LONGVARCHAR);
					END IF;
				END IF;
			END IF;

		/****************************************************** 
		 *  PURGE TRIGGER GENERATION - Generate if configured
		 *****************************************************/
			-- Get the trigger schedule
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;PURGE_START_TIME&apos;, attributes, timerStartTime);
			IF (timerStartTime IS NOT NULL) THEN
				SET triggerName = resourceNameUPPER || emptyStr(purgeTriggerNameSuffix);
				SET procedurePath = applicationPurgeCachePath;

				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;PURGE_WINDOW_PERIOD&apos;, attributes, purgeWindowPeriod);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;PURGE_WINDOW_COUNT&apos;, attributes, purgeWindowCount);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;PURGE_COLUMN_NAME&apos;, attributes, purgeColumnName);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;PURGE_PERIOD&apos;, attributes, timerPeriod);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;PURGE_COUNT&apos;, attributes, timerPeriodQty);

				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;PURGE_RECURRING_DAY&apos;, attributes, timerRecurringDay);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;PURGE_FROM_TIME_IN_A_DAY&apos;, attributes, timerFromTimeInADay);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;PURGE_END_TIME_IN_A_DAY&apos;, attributes, timerEndTimeInADay);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;PURGE_IS_CLUSTER&apos;, attributes, timerIsCluster);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;PURGE_ANNOTATION&apos;, attributes, triggerAnnotation);

				IF (purgeWindowPeriod IS NULL OR LENGTH(purgeWindowPeriod) = 0) THEN
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exInvalidParameter VALUE
						prefix||&apos;The cache attribute parameter &quot;purgeWindowPeriod&quot; may not be null or empty.&apos;;
				END IF;
				IF (purgeWindowPeriod IS NOT NULL AND UPPER(TRIM(purgeWindowPeriod)) NOT IN (&apos;MINUTE&apos;,&apos;HOUR&apos;,&apos;DAY&apos;,&apos;WEEK&apos;,&apos;MONTH&apos;,&apos;YEAR&apos;)) THEN
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exInvalidParameter VALUE 
						prefix||&apos;The purgeWindowPeriod=[&apos;||emptyStr(purgeWindowPeriod)||&apos;] is not valid.&apos;;
				END IF;
				IF (purgeWindowCount IS NULL OR LENGTH(purgeWindowCount) = 0 OR purgeWindowCount &lt;= 0) THEN
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exInvalidParameter VALUE
						prefix||&apos;The cache attribute parameter &quot;purgeWindowCount&quot;=[&apos;||emptyStr(purgeWindowCount)||&apos;] may not be null, empty or &lt;= 0.&apos;;
				END IF;

				SET procedureParams = emptyStr(purgeWindowCount)||&apos;,&apos;&apos;&apos;||emptyStr(UPPER(purgeWindowPeriod))||&apos;&apos;&apos;,&apos;&apos;&apos;||emptyStr(purgeColumnName)||&apos;&apos;&apos;,&apos;&apos;&apos;||emptyStr(resourcePath)||&apos;&apos;&apos;&apos;;

				IF (dropRecreateViewYN = &apos;Y&apos;) THEN
					-- Determine if the trigger exists or not
					CALL /lib/resource/ResourceExists(applicationTriggersPath || &apos;/&apos; || triggerName , &apos;TRIGGER&apos;, NULL, resExists); 
					IF (resExists) THEN
						-- resource found and we need to drop it.
						BEGIN INDEPENDENT TRANSACTION
							CALL /shared/ASAssets/Utilities/repository/destroyResource(applicationTriggersPath, triggerName, &apos;TRIGGER&apos;, success, createResponse, faultResponse);
							IF (faultResponse IS NULL) THEN
								CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, triggerName, cachekey,  constantsPath, 
										prefix||&apos;Successfully destroyed purge cache trigger &apos; || emptyStr(triggerName)); 
							ELSE
								RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned VALUE
										prefix||&apos;Unable to drop purge cache trigger &apos; || applicationTriggersPath || &apos;/&apos; || triggerName || &apos;  failed.  ERROR: &apos;||CAST(faultResponse AS LONGVARCHAR);
							END IF;
						END;	
					END IF;

					-- Create trigger for caching
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, triggerName, cachekey,  constantsPath, 
							prefix||&apos;Creating/updating purge cache trigger=[&apos;||triggerName||&apos;] resource for view &apos; || resourceNameUPPER);

					BEGIN INDEPENDENT TRANSACTION	
						CALL /shared/ASAssets/Utilities/repository/createResource(applicationTriggersPath, triggerName, &apos;TRIGGER&apos;, &apos;NONE&apos;, success, createResponse, faultResponse);
					END;

					-- Set up the trigger vector to be passed into updateTrigger()
					SET triggerAttrVect = VECTOR[
							(&apos;timerStartTime&apos;, 			CAST(timerStartTime AS VARCHAR)),
							(&apos;timerPeriod&apos;, 			timerPeriod),
							(&apos;timerPeriodQty&apos;, 			CAST(timerPeriodQty AS VARCHAR)),
							(&apos;timerRecurringDay&apos;, 		timerRecurringDay),
							(&apos;timerFromTimeInADay&apos;, 	CAST(timerFromTimeInADay AS VARCHAR)),
							(&apos;timerEndTimeInADay&apos;, 		CAST(timerEndTimeInADay AS VARCHAR)),
							(&apos;procedurePath&apos;, 			procedurePath),
							(&apos;procedureParams&apos;, 		procedureParams),
							(&apos;procedureExhaustCursors&apos;, &apos;0&apos;),
							(&apos;maxEventsQueued&apos;, 		&apos;1&apos;),
							(&apos;annotation&apos;, 				triggerAnnotation)
						];

					-- Update the trigger
					BEGIN INDEPENDENT TRANSACTION

						CALL /shared/ASAssets/Utilities/repository/updateTrigger(
								applicationTriggersPath||&apos;/&apos;||triggerName, -- fullResourcePath
								1, 				-- enabled
								&apos;TIMER&apos;, 		-- conditionType
								&apos;PROCEDURE&apos;, 	-- actionType,
								triggerAttrVect,
								NULL, 			-- attributeVect,		
								success,
								createResponse,
								faultResponse
							);
					END;
					IF (faultResponse IS NOT NULL) THEN
						RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound VALUE
							prefix||&apos;Failed to update purge cache trigger=[&apos;|| applicationTriggersPath||&apos;/&apos;||triggerName || &apos;].   ERROR=&apos;||CAST(faultResponse AS LONGVARCHAR);
					END IF;
				END IF;
			END IF;

		END IF;
		SET loopCount = loopCount + 1;
	END FOR;
/******************************************************
 * END LOOP 2: GENERATE AND CONFIGURE VIEW CACHE
 *****************************************************/

	-- Remove the sequence from the audit log sequence table if it was generated within this procedure
	IF (inSequenceNum IS NULL OR inSequenceNum = 0) THEN
		CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DeleteDBSequence(sequenceName, sequenceNum, origUserName, constantsPath, prefix, errStatus, errMessage);
		IF (errStatus = &apos;FAIL&apos;) THEN
			RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned VALUE errMessage;
		END IF;
	END IF;

	SET errStatus = &apos;SUCCESS&apos;;
	SET errMessage = NULL;
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath,	prefix||&apos;End cache framework.&apos;);
EXCEPTION
    WHEN /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound THEN
		SET errMessage = CURRENT_EXCEPTION.MESSAGE;
    	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, null, cachekey,  constantsPath, errMessage);
		-- Remove the sequence from the audit log sequence table if it was generated within this procedure
		IF (inSequenceNum IS NULL OR inSequenceNum = 0) THEN
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DeleteDBSequence(sequenceName, sequenceNum, origUserName, constantsPath, prefix, errStatus, seqMessage);
		END IF;
        SET errStatus = &apos;FAIL&apos;;
 	WHEN /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned THEN
    	SET errMessage = CURRENT_EXCEPTION.MESSAGE;
    	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, null, cachekey,  constantsPath, errMessage);
		-- Remove the sequence from the audit log sequence table if it was generated within this procedure
		IF (inSequenceNum IS NULL OR inSequenceNum = 0) THEN
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DeleteDBSequence(sequenceName, sequenceNum, origUserName, constantsPath, prefix, errStatus, seqMessage);
		END IF;
        SET errStatus = &apos;FAIL&apos;;
    ELSE
    	SET errMessage = CURRENT_EXCEPTION.TRACE;
    	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, null, cachekey,  constantsPath, errMessage);
		-- Remove the sequence from the audit log sequence table if it was generated within this procedure
		IF (inSequenceNum IS NULL OR inSequenceNum = 0) THEN
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DeleteDBSequence(sequenceName, sequenceNum, origUserName, constantsPath, prefix, errStatus, seqMessage);
		END IF;
        SET errStatus = &apos;FAIL&apos;;
END</attribute>
  <attribute name="creationDate" type="LONG">1387221618621</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1415054676443</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">7/171</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>Pause</item>
      </value>
    </item>
  </attribute>
</metadata>