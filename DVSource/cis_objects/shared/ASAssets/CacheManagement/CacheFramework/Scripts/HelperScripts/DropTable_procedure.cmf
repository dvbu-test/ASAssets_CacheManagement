<?xml version="1.1" encoding="UTF-8"?>
<metadata name="DropTable" path="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DropTable" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="sequenceNum" direction="IN" nullable="true">
      <datatype name="BIGINT" type="INTEGER"/>
    </parameter>
    <parameter name="origUserName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="constantsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="catalogName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="schemaName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="tableName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="tablePrefix" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="tableSuffix" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="cacheType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="attributes" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="errStatus" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ EXECUTE"/>
  </security>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="OracleObjectTableExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleObjectIndexExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCreateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleDropTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleIndexSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleCreateIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCreateUniqueIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleDropIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCreateSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleDropSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleGetSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleExecuteTableStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleObjectNameMaxLength" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleCachekeyName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleTruncateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleMergeSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleMergeTableSql" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleMergeTableExample" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleAuditTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCachingDataCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerObjectTableExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerObjectIndexExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCreateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerDropTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerIndexSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerCreateIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCreateUniqueIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerDropIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCreateSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerDropSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerGetSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerExecuteTableStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerObjectNameMaxLength" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerCachekeyName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerTruncateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerMergeSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerMergeTableSql" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerMergeTableExample" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerAuditTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCachingDataCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaObjectTableExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaObjectIndexExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaCreateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaDropTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaIndexSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaCreateSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaDropSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaGetSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaExecuteTableStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaExecuteTableExpressStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaObjectNameMaxLength" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaCachekeyName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaTruncateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaMergeSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaMergeTableSql" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaMergeTableExample" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaCachingDataCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaAuditTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="AuditTableDropDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="AuditSeqTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="AuditSeqTableDropDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataDropDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataSelect" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataSelectDeployment" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataDelete" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataInsert" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CISSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CISSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="IU_CACHE_KEY" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="D_CACHE_KEY" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_FULL_SINGLE" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_FULL_MULTI" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_INCREMENTAL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_HYBRID_DS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_HYBRID_DNS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_MERGE_TYPE1" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_MERGE_TYPE2" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_MERGE_TYPE4" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAll" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllFull" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllHybrid" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllMerge" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllIncremental" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CacheStatusSelect" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CacheStatusSelectByResPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="procedureGenerationPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="procedureTemplate" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="attributeName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="attributeXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="attributeValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBResourceValue" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSqlStatement" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="runObjectValue" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceValue" direction="OUT">
        <datatype type="INTEGER"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debugLevel" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="debugLoggingTypeOverride" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inModuleName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cachekey" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="message" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/concatNotNull" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString1" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inputString2" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outputString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/fixQuotes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inMessage" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="constantName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/concatNotNull" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/fixQuotes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/getConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* DropTable:

	This script is used to drop a database table.

	Modified Date:	Modified By:		CIS Version:	Reason:
	09/25/2014		Mike Tinius			6.2.6			Created new to make cache framework generic. 
*/
PROCEDURE DropTable(
	IN  sequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
	IN  origUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
	IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
	IN  catalogName				VARCHAR,
	IN  schemaName				VARCHAR,
	IN  tableName	 			VARCHAR,
	IN  tablePrefix				VARCHAR,
	IN  tableSuffix				VARCHAR,
	IN  cacheType				VARCHAR,
	IN  attributes				LONGVARCHAR,
	OUT errStatus 				VARCHAR
)
BEGIN
	DECLARE moduleName 				VARCHAR(255)	DEFAULT &apos;HelperScripts/DropTable&apos;;-- name of SQL Script
	DECLARE DEBUG_LEVEL_INFO 		INTEGER		 	DEFAULT CAST(getConstant(constantsPath, &apos;DEBUG_LEVEL_INFO&apos;) AS INTEGER);
	DECLARE DEBUG_LEVEL_ERROR 		INTEGER		 	DEFAULT CAST(getConstant(constantsPath, &apos;DEBUG_LEVEL_ERROR&apos;) AS INTEGER);
	DECLARE DEBUG_LEVEL_DEBUG 		INTEGER		 	DEFAULT CAST(getConstant(constantsPath, &apos;DEBUG_LEVEL_DEBUG&apos;) AS INTEGER);
 	DECLARE cacheDSType 			VARCHAR(255) 	DEFAULT getConstant(constantsPath, &apos;DefaultCacheDSType&apos;);
	DECLARE runDDLPath				LONGVARCHAR 	DEFAULT getConstant(constantsPath, &apos;ApplicationRunDDLPath&apos;);
	DECLARE runObjectExists			LONGVARCHAR 	DEFAULT getConstant(constantsPath, &apos;ApplicationObjectExists&apos;);
	DECLARE CommonTypesPath			VARCHAR(4096) 	DEFAULT /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.CommonTypesPath;
 	DECLARE cachekey				INTEGER 		DEFAULT 0;
	DECLARE sqlStatement			LONGVARCHAR;
	DECLARE tableExistsSQL			LONGVARCHAR;
	DECLARE sqlParam				LONGVARCHAR;
  	DECLARE resultCursor 			CURSOR (outputvalue BIGINT);
	DECLARE resultCursorValue 		BIGINT;
	DECLARE tableURL				VARCHAR(4096);
	DECLARE i						INTEGER;
	DECLARE TYPE recType			ROW(
			catalogName				VARCHAR,
			schemaName				VARCHAR,
			tableName	 			VARCHAR
		);
	DECLARE rec						recType;
	DECLARE tableVect				VECTOR(recType) DEFAULT VECTOR[(null)];
	-- Variables for Full multi-table caching
	DECLARE StorageBucketCatalog	VARCHAR;
	DECLARE StorageBucketSchema		VARCHAR;
	DECLARE StorageBucketNumBuckets	INTEGER;
	DECLARE StorageBucketPrefix		VARCHAR;
	DECLARE resourceName			VARCHAR DEFAULT concatNotNull(concatNotNull(tablePrefix, tableName, 2), tableSuffix, 3);

	/******************************************************
	 *  DROP TABLE - FULL MULTI-TABLE CACHE
	 *****************************************************/
	IF cacheType IN (&apos;FM&apos;)  THEN	
		-- Get the bucket attributres from cache data row
		CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;MULTI_BUCKET_CATALOG&apos;, attributes, StorageBucketCatalog);
		CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;MULTI_BUCKET_SCHEMA&apos;, attributes, StorageBucketSchema);
		CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;MULTI_BUCKET_TABLE_PREFIX&apos;, attributes, StorageBucketPrefix);
		CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetAttributeNameValueProc(&apos;MULTI_NUM_BUCKETS&apos;, attributes, StorageBucketNumBuckets);

		-- Validate the buckets
		IF (StorageBucketCatalog IS NULL OR POSITION(&apos;$DEFAULT_CATALOG_NAME&apos; IN StorageBucketCatalog) &gt; 0) THEN
			SET StorageBucketCatalog = catalogName;				-- Default to constants
		END IF;
		IF (StorageBucketSchema IS NULL OR POSITION(&apos;$DEFAULT_SCHEMA_NAME&apos; IN StorageBucketSchema) &gt; 0) THEN
			SET StorageBucketSchema = schemaName;				-- Default to constants
		END IF;
		IF (StorageBucketPrefix IS NULL OR POSITION(&apos;$DEFAULT_RES_NAME&apos; IN StorageBucketPrefix) &gt; 0) THEN
			SET StorageBucketPrefix = concatNotNull(concatNotNull(tablePrefix, tableName, 2), tableSuffix, 3);	-- Default to dynamic extraction of table name
		END IF;
		IF (StorageBucketNumBuckets IS NULL OR StorageBucketNumBuckets &lt;= 0) THEN
			SET StorageBucketNumBuckets = 3;					-- Default to 3 buckets when &lt;= 0
		END IF;

		-- Loop through the number of buckets to drop the bucket table.
		SET i = 1;
		WHILE (i &lt;= StorageBucketNumBuckets) DO
			SET tableVect[i].catalogName = StorageBucketCatalog;
			SET tableVect[i].schemaName = StorageBucketSchema;
			SET tableVect[i].tableName = StorageBucketPrefix||CAST((i-1) AS VARCHAR);
			SET tableVect = EXTEND(tableVect, 1);
			SET i = i + 1;
		END WHILE;
		SET tableVect = TRUNCATE(tableVect, 1);
	/******************************************************
	 * DROP TABLE - ALL OTHER CACHE TYPES 
	 *****************************************************/
	ELSE -- All other cache types
		SET tableVect[1].catalogName = catalogName;
		SET tableVect[1].schemaName = schemaName;
		SET tableVect[1].tableName = concatNotNull(concatNotNull(tablePrefix, tableName, 2), tableSuffix, 3);
	END IF;

	SET i = 1;
	WHILE (i &lt;= CARDINALITY(tableVect)) DO
		-- Get the table record
		SET rec = tableVect[i];
		-- Get the table name for cfLog purposes
		SET resourceName = rec.tableName;
		-- Format the table URL
		IF (rec.tableName IS NOT NULL) THEN
			SET tableURL  = rec.tableName;
			IF (rec.schemaName IS NOT NULL) THEN
				SET tableURL  = rec.schemaName||&apos;.&apos;||tableURL;
				IF (rec.catalogName IS NOT NULL) THEN
					SET tableURL  = rec.catalogName||&apos;.&apos;||tableURL;
				END IF;
			END IF;
		END IF;

		CASE
			WHEN cacheDSType = &apos;ORACLE&apos; THEN
				-- Test for table existence
				-- 		SQL to pass in to ApplicationObjectExists to check for table existence.  Resolve the parameter $TableName first.
				--		SET tableExistsSQL = SELECT COUNT(*) c FROM all_tables WHERE UPPER(owner) = UPPER(&apos;&apos;$SchemaName&apos;&apos;) AND UPPER(table_name) = UPPER(&apos;&apos;$TableName&apos;&apos;)&apos;;
				SET tableExistsSQL = getConstant(CommonTypesPath, &apos;OracleObjectTableExists&apos;);
				SET tableExistsSQL = REPLACE(tableExistsSQL, &apos;$SchemaName&apos;, rec.schemaName);
				SET tableExistsSQL = REPLACE(tableExistsSQL, &apos;$TableName&apos;, rec.tableName);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, 
							&apos;VERIFY TABLE: DBType=&apos;||cacheDSType||&apos;.  Execute &apos; || tableExistsSQL);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBResourceValue(tableExistsSQL, runObjectExists, resultCursorValue);

				-- Drop the table
				IF resultCursorValue &gt; 0 THEN	 
					SET sqlParam = getConstant(CommonTypesPath, &apos;OracleDropTable&apos;);
					SET sqlParam = REPLACE(sqlParam, &apos;$SchemaName&apos;, rec.schemaName);
					SET sqlParam = REPLACE(sqlParam, &apos;$TableName&apos;, rec.tableName);
					SET sqlStatement = &apos;SELECT outputValue FROM &apos;||runDDLPath||&apos;(&apos;&apos;&apos;||fixQuotes(sqlParam)||&apos;&apos;&apos;)&apos;;
					OPEN resultCursor FOR sqlStatement;
					FETCH resultCursor INTO resultCursorValue;
					CLOSE resultCursor;
					IF resultCursorValue = 1 THEN	 
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, 
							&apos;DROP TABLE: DBType=&apos;||cacheDSType||&apos;.  Successfully executed DDL statement &apos; || sqlParam);

							-- Verify table was dropped
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBResourceValue(tableExistsSQL, runObjectExists, resultCursorValue);
							IF resultCursorValue = 0 THEN	 
								SET errStatus = &apos;SUCCESS&apos;;	
								CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
										&apos;VERIFIED TABLE: DBType=&apos;||cacheDSType||&apos;.  Verified table was dropped for &apos;||tableURL);
							ELSE
								SET errStatus = &apos;FAIL&apos;;	
								CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
										&apos;VERIFIED TABLE: DBType=&apos;||cacheDSType||&apos;.  Failed to drop table &apos;||tableURL);
							END IF;
					END IF;
				ELSE
					-- The table does not exist which means success
					SET errStatus = &apos;SUCCESS&apos;;	
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
							&apos;DROP TABLE: DBType=&apos;||cacheDSType||&apos;.  The table does not exist for &apos;||tableURL);
				END IF;

			WHEN cacheDSType = &apos;SQLSERVER&apos; THEN
				-- Test for table existence
				-- 		SQL to pass in to ApplicationObjectExists to check for table existence.  Resolve the parameter $TableName first.
				--		SET tableExistsSQL = &apos;SELECT COUNT(*) c FROM sys.objects WHERE OBJECT_ID = OBJECT_ID(N&apos;&apos;&apos;||&apos;&apos;$SchemaName.$TableName&apos;&apos;) AND type = (N&apos;&apos;U&apos;&apos;)&apos;;
				SET tableExistsSQL = getConstant(CommonTypesPath, &apos;SqlServerObjectTableExists&apos;);
				SET tableExistsSQL = REPLACE(tableExistsSQL, &apos;$CatalogName&apos;, rec.catalogName);
				SET tableExistsSQL = REPLACE(tableExistsSQL, &apos;$SchemaName&apos;, rec.schemaName);
				SET tableExistsSQL = REPLACE(tableExistsSQL, &apos;$TableName&apos;, rec.tableName);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, 
							&apos;VERIFY TABLE: DBType=&apos;||cacheDSType||&apos;.  Execute &apos; || tableExistsSQL);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBResourceValue(tableExistsSQL, runObjectExists, resultCursorValue);

				-- Drop the table
				IF resultCursorValue &gt; 0 THEN	 
					SET sqlParam = getConstant(CommonTypesPath, &apos;SqlServerDropTable&apos;);
					SET sqlParam = REPLACE(sqlParam, &apos;$CatalogName&apos;, rec.catalogName);
					SET sqlParam = REPLACE(sqlParam, &apos;$SchemaName&apos;, rec.schemaName);
					SET sqlParam = REPLACE(sqlParam, &apos;$TableName&apos;, rec.tableName);
					SET sqlStatement = &apos;SELECT outputValue FROM &apos;||runDDLPath||&apos;(&apos;&apos;&apos;||fixQuotes(sqlParam)||&apos;&apos;&apos;)&apos;;
					OPEN resultCursor FOR sqlStatement;
					FETCH resultCursor INTO resultCursorValue;
					CLOSE resultCursor;
					IF resultCursorValue = 1 THEN	 
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, 
							&apos;DROP TABLE: DBType=&apos;||cacheDSType||&apos;.  Successfully executed DDL statement &apos; || sqlParam);

							-- Verify table was dropped
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBResourceValue(tableExistsSQL, runObjectExists, resultCursorValue);
							IF resultCursorValue = 0 THEN	 
								SET errStatus = &apos;SUCCESS&apos;;	
								CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
										&apos;VERIFIED TABLE: DBType=&apos;||cacheDSType||&apos;.  Verified table was dropped for &apos;||tableURL);
							ELSE
								SET errStatus = &apos;FAIL&apos;;	
								CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
										&apos;VERIFIED TABLE: DBType=&apos;||cacheDSType||&apos;.  Failed to drop table &apos;||tableURL);
							END IF;
					END IF;
				ELSE
					-- The table does not exist which means success
					SET errStatus = &apos;SUCCESS&apos;;	
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
							&apos;DROP TABLE: DBType=&apos;||cacheDSType||&apos;.  The table does not exist for &apos;||tableURL);
				END IF;

			WHEN cacheDSType = &apos;NETEZZA&apos; THEN
				-- Test for table existence
				-- 		SQL to pass in to ApplicationObjectExists to check for table existence.  Resolve the parameter $TableName first.
				--		SET tableExistsSQL = &apos;SELECT COUNT(*) c FROM _v_table WHERE UPPER(schema) = UPPER(&apos;&apos;$SchemaName&apos;&apos;) AND UPPER(tablename) = UPPER(&apos;&apos;$TableName&apos;&apos;)&apos;;
				SET tableExistsSQL = getConstant(CommonTypesPath, &apos;NetezzaObjectTableExists&apos;);
				SET tableExistsSQL = REPLACE(tableExistsSQL, &apos;$CatalogName&apos;, rec.catalogName);
				SET tableExistsSQL = REPLACE(tableExistsSQL, &apos;$SchemaName&apos;, rec.schemaName);
				SET tableExistsSQL = REPLACE(tableExistsSQL, &apos;$TableName&apos;, rec.tableName);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, 
							&apos;VERIFY TABLE: DBType=&apos;||cacheDSType||&apos;.  Execute &apos; || sqlStatement);
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBResourceValue(tableExistsSQL, runObjectExists, resultCursorValue);

				-- Drop the table
				IF resultCursorValue &gt; 0 THEN	 
					SET sqlParam = getConstant(CommonTypesPath, &apos;NetezzaDropTable&apos;);
					SET sqlParam = REPLACE(sqlParam, &apos;$CatalogName&apos;, rec.catalogName);
					SET sqlParam = REPLACE(sqlParam, &apos;$SchemaName&apos;, rec.schemaName);
					SET sqlParam = REPLACE(sqlParam, &apos;$TableName&apos;, rec.tableName);
					SET sqlStatement = &apos;SELECT outputValue FROM &apos;||runDDLPath||&apos;(&apos;&apos;&apos;||fixQuotes(sqlParam)||&apos;&apos;&apos;)&apos;;
					OPEN resultCursor FOR sqlStatement;
					FETCH resultCursor INTO resultCursorValue;
					CLOSE resultCursor;
					IF resultCursorValue = 1 THEN	 
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, 
							&apos;DROP TABLE: DBType=&apos;||cacheDSType||&apos;.  Successfully executed DDL statement &apos; || sqlParam);

							-- Verify table was dropped
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBResourceValue(tableExistsSQL, runObjectExists, resultCursorValue);
							IF resultCursorValue = 0 THEN	 
								SET errStatus = &apos;SUCCESS&apos;;	
								CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
										&apos;VERIFIED TABLE: DBType=&apos;||cacheDSType||&apos;.  Verified table was dropped for &apos;||tableURL);
							ELSE
								SET errStatus = &apos;FAIL&apos;;	
								CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
										&apos;VERIFIED TABLE: DBType=&apos;||cacheDSType||&apos;.  Failed to drop table &apos;||tableURL);
							END IF;
					END IF;
				ELSE
					-- The table does not exist which means success
					SET errStatus = &apos;SUCCESS&apos;;	
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
							&apos;DROP TABLE: DBType=&apos;||cacheDSType||&apos;.  The table does not exist for &apos;||tableURL);
				END IF;

			ELSE
				SET errStatus = &apos;FAIL&apos;;	
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
					&apos;DROP TABLE: Was not executed due to default Cache Type [&apos;||cacheDSType||&apos;] is not supported.&apos;);
		END CASE;
		SET i = i + 1;
	END WHILE;
EXCEPTION
    WHEN /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned THEN
		CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
        		CURRENT_EXCEPTION.MESSAGE);
		SET errStatus = &apos;FAIL&apos;;
	WHEN  /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound THEN
		CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
				CURRENT_EXCEPTION.MESSAGE);
		SET errStatus = &apos;FAIL&apos;;
	ELSE
		CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
				CURRENT_EXCEPTION.TRACE);
		SET errStatus = &apos;FAIL&apos;;	
END</attribute>
  <attribute name="creationDate" type="LONG">1409859317033</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1415054676443</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>