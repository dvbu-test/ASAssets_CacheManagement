<?xml version="1.1" encoding="UTF-8"?>
<metadata name="CreateIndex" path="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/CreateIndex" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="sequenceNum" direction="IN" nullable="true">
      <datatype name="BIGINT" type="INTEGER"/>
    </parameter>
    <parameter name="origUserName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="constantsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="indexConfigVect" direction="IN" nullable="true">
      <datatype name="indexConfigVect" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="indexConfigType" referenceDefinitionSet="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes" referenceType="indexConfigType" type="TREE" refId="1">
            <element name="actionType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="dropCreateIdxFlag">
              <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
            </element>
            <element name="catalogName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="schemaName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="tableName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="indexName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="indexUnique">
              <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
            </element>
            <element name="indexColumns">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="indexType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="indexOptions">
              <datatype name="VARCHAR" type="STRING" maxLength="2048"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="errStatus" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="OracleObjectTableExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleObjectIndexExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCreateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleDropTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleIndexSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleCreateIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCreateUniqueIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleDropIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCreateSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleDropSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleGetSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleExecuteTableStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleObjectNameMaxLength" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleCachekeyName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleTruncateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleMergeSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleMergeTableSql" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleMergeTableExample" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleAuditTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCachingDataCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerObjectTableExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerObjectIndexExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCreateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerDropTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerIndexSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerCreateIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCreateUniqueIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerDropIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCreateSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerDropSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerGetSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerExecuteTableStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerObjectNameMaxLength" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerCachekeyName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerTruncateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerMergeSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerMergeTableSql" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerMergeTableExample" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerAuditTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCachingDataCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaObjectTableExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaObjectIndexExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaCreateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaDropTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaIndexSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaCreateSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaDropSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaGetSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaExecuteTableStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaExecuteTableExpressStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaObjectNameMaxLength" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaCachekeyName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaTruncateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaMergeSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaMergeTableSql" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaMergeTableExample" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaCachingDataCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaAuditTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="AuditTableDropDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="AuditSeqTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="AuditSeqTableDropDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataDropDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataSelect" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataSelectDeployment" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataDelete" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataInsert" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CISSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CISSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="IU_CACHE_KEY" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="D_CACHE_KEY" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_FULL_SINGLE" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_FULL_MULTI" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_INCREMENTAL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_HYBRID_DS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_HYBRID_DNS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_MERGE_TYPE1" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_MERGE_TYPE2" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_MERGE_TYPE4" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAll" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllFull" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllHybrid" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllMerge" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllIncremental" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CacheStatusSelect" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CacheStatusSelectByResPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="procedureGenerationPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="procedureTemplate" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBResourceValue" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSqlStatement" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="runObjectValue" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceValue" direction="OUT">
        <datatype type="INTEGER"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debugLevel" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="debugLoggingTypeOverride" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inModuleName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cachekey" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="message" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/fixQuotes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inMessage" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="constantName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/fixQuotes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/getConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* CreateIndex:

	This script is used to create one or more indexes based on the information configured in the vector.
	This script can be called from either CrateIndexConfigure (Cache configuration) or RefreshCache.

	Modified Date:	Modified By:		CIS Version:	Reason:
	09/25/2014		Mike Tinius			6.2.6			Created new to make cache framework generic. 
*/
PROCEDURE CreateIndex(
	IN  sequenceNum				BIGINT,			-- Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
	IN  origUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
	IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
	IN  indexConfigVect			VECTOR(/shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.indexConfigType),
	OUT errStatus 				VARCHAR
)
BEGIN
	DECLARE moduleName 				VARCHAR(255)	DEFAULT &apos;HelperScripts/CreateIndex&apos;;-- name of SQL Script
	DECLARE DEBUG_LEVEL_INFO 		INTEGER		 	DEFAULT CAST(getConstant(constantsPath, &apos;DEBUG_LEVEL_INFO&apos;) AS INTEGER);
	DECLARE DEBUG_LEVEL_ERROR 		INTEGER		 	DEFAULT CAST(getConstant(constantsPath, &apos;DEBUG_LEVEL_ERROR&apos;) AS INTEGER);
	DECLARE DEBUG_LEVEL_DEBUG 		INTEGER		 	DEFAULT CAST(getConstant(constantsPath, &apos;DEBUG_LEVEL_DEBUG&apos;) AS INTEGER);
 	DECLARE cacheDSType 			VARCHAR(255) 	DEFAULT getConstant(constantsPath, &apos;DefaultCacheDSType&apos;);
	DECLARE runDDLPath				LONGVARCHAR 	DEFAULT getConstant(constantsPath, &apos;ApplicationRunDDLPath&apos;);
	DECLARE runObjectExists			LONGVARCHAR 	DEFAULT getConstant(constantsPath, &apos;ApplicationObjectExists&apos;);
	DECLARE CommonTypesPath			VARCHAR(4096) 	DEFAULT /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.CommonTypesPath;
 	DECLARE cachekey				INTEGER 		DEFAULT 0;
	DECLARE sqlStatement			LONGVARCHAR;
	DECLARE sqlParam				LONGVARCHAR;
	DECLARE indexExistsSQL			LONGVARCHAR;
  	DECLARE resultCursor 			CURSOR (outputvalue BIGINT);
	DECLARE resultCursorValue 		BIGINT;
	DECLARE tableURL				VARCHAR(4096);
	DECLARE i						INTEGER;
	DECLARE indexRec				/shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.indexConfigType;
	DECLARE indexName				VARCHAR(4096);
	DECLARE dropCreateIdxFlag		BOOLEAN;
	DECLARE errMessage				LONGVARCHAR;

	SET errStatus = &apos;SUCCESS&apos;;
	--call print(&apos;CARDINALITY(indexConfigVect)=&apos;||CARDINALITY(indexConfigVect));
	SET i = 1;
	WHILE (i &lt;= CARDINALITY(indexConfigVect)) DO
		-- Get the index record
		SET indexRec = indexConfigVect[i];
		-- Get the index name for cfLog purposes
		SET indexName = indexRec.indexName;

		-- When multi-table is configured and storageDropCreateIdx=1 then CIS will automatically drop/create the indexes so there is no need to do it here.
		SET dropCreateIdxFlag = TRUE;
		IF (indexRec.dropCreateIdxFlag IS NOT NULL AND indexRec.dropCreateIdxFlag = 1) THEN
			SET dropCreateIdxFlag = FALSE;
		END IF;

		IF (indexRec.actionType IS NOT NULL AND indexRec.actionType = &apos;CREATE&apos; AND dropCreateIdxFlag) THEN
			-- Format the table URL
			IF (indexRec.tableName IS NOT NULL) THEN
				SET tableURL  = indexRec.tableName;
				IF (indexRec.schemaName IS NOT NULL) THEN
					SET tableURL  = indexRec.schemaName||&apos;.&apos;||tableURL;
					IF (indexRec.catalogName IS NOT NULL) THEN
						SET tableURL  = indexRec.catalogName||&apos;.&apos;||tableURL;
					END IF;
				END IF;
			END IF;

			CASE
				WHEN cacheDSType = &apos;ORACLE&apos; THEN
					-- Create index examples
					--		   PK: CREATE UNIQUE INDEX &quot;CACHE_ADMIN&quot;.&quot;V_TEST_FULL_MULTI0_pk&quot; ON &quot;CACHE_ADMIN&quot;.&quot;V_TEST_FULL_MULTI0&quot;(&quot;C1&quot; asc);
					--		Other: CREATE INDEX &quot;CACHE_ADMIN&quot;.&quot;V_TEST_FULL_MULTI0_updkey&quot; ON &quot;CACHE_ADMIN&quot;.&quot;V_TEST_FULL_MULTI0&quot;(&quot;UPD&quot; asc);
					-- Verify Index exists
					SET indexExistsSQL = getConstant(CommonTypesPath, &apos;OracleObjectIndexExists&apos;);
					SET indexExistsSQL = REPLACE(indexExistsSQL, &apos;$IndexName&apos;, indexRec.indexName);
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, indexName, cachekey,  constantsPath, 
								&apos;VERIFY INDEX: DBType=&apos;||cacheDSType||&apos;.  Execute &apos; || indexExistsSQL);
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBResourceValue(indexExistsSQL, runObjectExists, resultCursorValue);

					-- Index does not exist so create it
					IF resultCursorValue = 0 THEN	 
						IF (indexRec.indexUnique = 1) THEN
							SET sqlParam = getConstant(CommonTypesPath, &apos;OracleCreateUniqueIndex&apos;);
						ELSE
							SET sqlParam = getConstant(CommonTypesPath, &apos;OracleCreateIndex&apos;);
						END IF;
						SET sqlParam = REPLACE(sqlParam, &apos;$IndexName&apos;, indexName);
						SET sqlParam = REPLACE(sqlParam, &apos;$SchemaName&apos;, indexRec.schemaName);
						SET sqlParam = REPLACE(sqlParam, &apos;$TableName&apos;, indexRec.tableName);
						SET sqlParam = REPLACE(sqlParam, &apos;$ColumnList&apos;, indexConfigVect[i].indexColumns);
						SET sqlParam = REPLACE(sqlParam, &apos;$IndexType&apos;, TRIM(NVL(indexConfigVect[i].indexType, &apos; &apos;)));
						SET sqlParam = REPLACE(sqlParam, &apos;$IndexOptions&apos;, TRIM(NVL(indexConfigVect[i].indexOptions, &apos; &apos;)));
						SET sqlStatement = &apos;SELECT outputValue FROM &apos;||runDDLPath||&apos;(&apos;&apos;&apos;||fixQuotes(sqlParam)||&apos;&apos;&apos;)&apos;;
						-- Create index
						OPEN resultCursor FOR sqlStatement;
						FETCH resultCursor INTO resultCursorValue;
						CLOSE resultCursor;
						IF resultCursorValue = 1 THEN	 
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, indexName, cachekey,  constantsPath, 
								&apos;CREATED INDEX: DBType=&apos;||cacheDSType||&apos;.  Successfully execute DDL statement &apos; || sqlParam);

							-- Verify index was created
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBResourceValue(indexExistsSQL, runObjectExists, resultCursorValue);
							IF resultCursorValue = 1 THEN	 
								SET errStatus = &apos;SUCCESS&apos;;	
								CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, indexName, cachekey,  constantsPath, 
										&apos;VERIFIED INDEX: DBType=&apos;||cacheDSType||&apos;.  Verified index was created for index &apos;||tableURL||&apos;.&apos;||indexName);
							ELSE
								SET errStatus = &apos;FAIL&apos;;	
								CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, indexName, cachekey,  constantsPath, 
										&apos;VERIFIED INDEX: DBType=&apos;||cacheDSType||&apos;.  Failed to create index for index &apos;||tableURL||&apos;.&apos;||indexName);
							END IF;
						END IF;
					ELSE
						-- The index already exists which means success
						SET errStatus = &apos;SUCCESS&apos;;	
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, indexName, cachekey,  constantsPath, 
								&apos;VERIFIED INDEX: DBType=&apos;||cacheDSType||&apos;.  Index already exists for index &apos;||tableURL||&apos;.&apos;||indexName);
					END IF;

				WHEN cacheDSType = &apos;SQLSERVER&apos; THEN
					-- Create index examples
					--		   PK: CREATE UNIQUE INDEX [V_TEST_FULL_MULTI1_pk] ON [CompositeCache_LAB].[dbo].[V_TEST_FULL_MULTI1]([C1] asc);
					--		Other: CREATE INDEX [V_TEST_FULL_MULTI1_updkey] ON [CompositeCache_LAB].[dbo].[V_TEST_FULL_MULTI1]([UPD] asc);

					-- Verify Index exists
					SET indexExistsSQL = getConstant(CommonTypesPath, &apos;SqlServerObjectIndexExists&apos;);
					SET indexExistsSQL = REPLACE(indexExistsSQL, &apos;$IndexName&apos;, indexName);
					SET indexExistsSQL = REPLACE(indexExistsSQL, &apos;$TableName&apos;, indexRec.tableName);
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, indexName, cachekey,  constantsPath, 
								&apos;VERIFY INDEX: DBType=&apos;||cacheDSType||&apos;.  Execute &apos; || indexExistsSQL);
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBResourceValue(indexExistsSQL, runObjectExists, resultCursorValue);

					-- Index does not exist so create it
					IF resultCursorValue = 0 THEN	 
						IF (indexRec.indexUnique = 1) THEN
							SET sqlParam = getConstant(CommonTypesPath, &apos;SqlServerCreateUniqueIndex&apos;);
						ELSE
							SET sqlParam = getConstant(CommonTypesPath, &apos;SqlServerCreateIndex&apos;);
						END IF;
						SET sqlParam = REPLACE(sqlParam, &apos;$IndexName&apos;, indexName);
						SET sqlParam = REPLACE(sqlParam, &apos;$SchemaName&apos;, indexRec.schemaName);
						SET sqlParam = REPLACE(sqlParam, &apos;$CatalogName&apos;, indexRec.catalogName);
						SET sqlParam = REPLACE(sqlParam, &apos;$TableName&apos;, indexRec.tableName);
						SET sqlParam = REPLACE(sqlParam, &apos;$ColumnList&apos;, indexConfigVect[i].indexColumns);
						SET sqlParam = REPLACE(sqlParam, &apos;$IndexOptions&apos;, TRIM(NVL(indexConfigVect[i].indexOptions, &apos; &apos;)));
						SET sqlStatement = &apos;SELECT outputValue FROM &apos;||runDDLPath||&apos;(&apos;&apos;&apos;||fixQuotes(sqlParam)||&apos;&apos;&apos;)&apos;;
						-- Create index
						OPEN resultCursor FOR sqlStatement;
						FETCH resultCursor INTO resultCursorValue;
						CLOSE resultCursor;
						IF resultCursorValue = 1 THEN	 
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, indexName, cachekey,  constantsPath, 
								&apos;CREATED INDEX: DBType=&apos;||cacheDSType||&apos;.  Successfully execute DDL statement &apos; || sqlParam);

							-- Verify index was created
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBResourceValue(indexExistsSQL, runObjectExists, resultCursorValue);
							IF resultCursorValue = 1 THEN	 
								SET errStatus = &apos;SUCCESS&apos;;	
								CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, indexName, cachekey,  constantsPath, 
										&apos;VERIFIED INDEX: DBType=&apos;||cacheDSType||&apos;.  Verified index was created for index &apos;||tableURL||&apos;.&apos;||indexName);
							ELSE
								SET errStatus = &apos;FAIL&apos;;	
								CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, indexName, cachekey,  constantsPath, 
										&apos;VERIFIED INDEX: DBType=&apos;||cacheDSType||&apos;.  Failed to create index for index &apos;||tableURL||&apos;.&apos;||indexName);
							END IF;
						END IF;
					ELSE
						-- The index already exists which means success
						SET errStatus = &apos;SUCCESS&apos;;	
						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, indexName, cachekey,  constantsPath, 
								&apos;VERIFIED INDEX: DBType=&apos;||cacheDSType||&apos;.  Index already exists for index &apos;||tableURL||&apos;.&apos;||indexName);
					END IF;

				WHEN cacheDSType = &apos;NETEZZA&apos; THEN
					-- Netezza does not have indexes so this operation is logged as a NO OP in audit logger.
					SET errStatus = &apos;SUCCESS&apos;;	
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, indexName, cachekey,  constantsPath,
								&apos;INDEX WARNING: DBType=&apos;||cacheDSType||&apos;.  Create index &quot;not&quot; executed due to Netezza does not support indexes.&apos; || sqlStatement);
				ELSE
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exCacheDBTypeNotSupported 
						VALUE &apos;CREATE INDEX: Was not executed due to default Cache Type [&apos;||cacheDSType||&apos;] is not supported.&apos;;
			END CASE;
		END IF;
		SET i = i + 1;
	END WHILE;

EXCEPTION
	ELSE
		SET errMessage = CURRENT_EXCEPTION.TRACE;
		CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, indexName, cachekey,  constantsPath, errMessage);
		RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned VALUE errMessage;
END</attribute>
  <attribute name="creationDate" type="LONG">1409859317033</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1415054676443</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>