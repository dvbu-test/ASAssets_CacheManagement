<?xml version="1.1" encoding="UTF-8"?>
<metadata name="DeployCache" path="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/PublishedImpl/DeployCache" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="inSequenceName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inOrigUserName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="constantsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="inResourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="errStatus" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="errMessage" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ EXECUTE"/>
  </security>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="OracleObjectTableExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleObjectIndexExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCreateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleDropTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleIndexSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleCreateIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCreateUniqueIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleDropIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCreateSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleDropSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleGetSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleExecuteTableStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleObjectNameMaxLength" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleCachekeyName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleTruncateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleMergeSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="OracleMergeTableSql" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleMergeTableExample" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleAuditTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="OracleCachingDataCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerObjectTableExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerObjectIndexExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCreateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerDropTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerIndexSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerCreateIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCreateUniqueIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerDropIndex" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCreateSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerDropSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerGetSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerExecuteTableStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerObjectNameMaxLength" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerCachekeyName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerTruncateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerMergeSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SqlServerMergeTableSql" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerMergeTableExample" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerAuditTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="SqlServerCachingDataCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaObjectTableExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaObjectIndexExists" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaCreateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaDropTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaIndexSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaCreateSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaDropSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaGetSequence" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaExecuteTableStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaExecuteTableExpressStats" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaObjectNameMaxLength" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaCachekeyName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaTruncateTable" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaMergeSupported" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NetezzaMergeTableSql" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaMergeTableExample" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaCachingDataCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="NetezzaAuditTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="AuditTableDropDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="AuditSeqTableCreateDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="AuditSeqTableDropDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataDropDDL" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataSelect" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataSelectDeployment" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataDelete" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataInsert" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CISSepBeg" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CISSepEnd" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="IU_CACHE_KEY" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="D_CACHE_KEY" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_FULL_SINGLE" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_FULL_MULTI" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_INCREMENTAL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_HYBRID_DS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_HYBRID_DNS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_MERGE_TYPE1" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_MERGE_TYPE2" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CACHE_TYPE_MERGE_TYPE4" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAll" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllFull" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllHybrid" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllMerge" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ValidCacheTypesAllIncremental" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CacheStatusSelect" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CacheStatusSelectByResPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="procedureGenerationPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="procedureTemplate" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/ConfigureCacheScript" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="prefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inSequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="inOrigUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="CachingDataSelect" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DeleteDBSequence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceName" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inPrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/FixPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outPath" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetCachedConfigured" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inResourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="configured" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBSequence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSequenceName" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inSequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="inOrigUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inPrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="sequenceNum" direction="OUT">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBSequenceByName" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSequenceName" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inSequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="inOrigUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inPrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="sequenceNum" direction="OUT">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetStagingViewPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inResourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="stagingFolderPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="stagingViewPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetUniqueSequenceName" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSequenceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="prefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="suffix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="sequenceName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sequenceNum" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="origUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debugLevel" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="debugLoggingTypeOverride" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inModuleName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cachekey" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="message" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/cachedResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="operation" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="startingPath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="includePathList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludePathList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="operation">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="prevStatus">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="currStatus">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourceType">
            <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
          </element>
          <element name="resourcePath">
            <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceCacheConfigCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="inType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="configured">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="cachePolicy">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageDataSourcePath">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageTargetName">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storagePath">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="refreshMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="scheduleMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="startTime">
            <datatype type="DATETIME"/>
          </element>
          <element name="fromTimeInADay">
            <datatype type="INTEGER"/>
          </element>
          <element name="endTimeInADay">
            <datatype type="INTEGER"/>
          </element>
          <element name="recurringDay">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="interval">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="period">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="count">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="isCluster">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="expirationPeriod">
            <datatype type="INTEGER"/>
          </element>
          <element name="clearRule">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="allOrNothing">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="incremental">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="storageBucketMode">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketCatalog">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketSchema">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketPrefix">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketNumBuckets">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="storageDropCreateIdx">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="firstRefreshCallback">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="secondRefreshCallback">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateImpactedResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inStartingFolders" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inExcludePathsKeywords" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outputString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="constantName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/system/customfunctions/emptyStr" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/system/customfunctions/getConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* DeployCache:

	This script is the main driver script for deploying cache views and tables.  The script performs the following:
		-- 1. Execute the CachingData_Insert procedure to insert CachingData() rows into CACHING_DATA table
		-- 2. Disable the cache views according to CACHING_DATA query
		-- 3. Invoke ConfigureCacheScript to create the tables but don&apos;t configure the views
		-- 4. Update impacted resources
		-- 5. Enable the cache views according to CACHING_DATA query

	Modified Date:	Modified By:		CIS Version:	Reason:
	09/25/2014		Mike Tinius			6.2.6			Created new to make cache framework generic. 
*/  
PROCEDURE DeployCache(
	IN  inSequenceName			VARCHAR,		-- The name of the sequence.  Leave null when called manually and a sequence will be generated otherwise it is passed in from the invoking procedure.
	IN  inOrigUserName			VARCHAR(255),	-- The original user@domain who started the process and transcends sessions.  If not set it will be retrieved from the environment.
	IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
	IN  inResourcePath			VARCHAR(4096),	-- The specific view path to be configured or leave null to configure all views in CachingData (procedure) / CACHING_DATA (table).
												-- This path acts as a filter for what is already configured in CACHING_DATA so the view must have already been configured in CACHING_DATA.
												-- Use a wildcard &quot;%&quot; at the end of the path to signify any text matching the text preceeding the wildcard symbol &quot;%&quot;.
	OUT errStatus 				VARCHAR,		-- Status=SUCCESS or FAIL
	OUT errMessage 				LONGVARCHAR		-- Status message upon FAIL othwerwise NULL
)
BEGIN
	DECLARE moduleName 						VARCHAR(255) 	DEFAULT &apos;PublishedImpl/DeployCache&apos;;-- name of SQL Script
	DECLARE prefix							VARCHAR 		DEFAULT &apos;DEPLOY CACHE: &apos;; 		-- Used to prefix messages for the log so the messages are all uniform.
	DECLARE resourcePath					VARCHAR(4096)	DEFAULT TRIM(inResourcePath);
	DECLARE CommonTypesPath					VARCHAR(4096) 	DEFAULT /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.CommonTypesPath;
	DECLARE ValidCacheTypesAllFull			VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;ValidCacheTypesAllFull&apos;);
	DECLARE ValidCacheTypesAllHybrid		VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;ValidCacheTypesAllHybrid&apos;);
	DECLARE ValidCacheTypesAllMerge			VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;ValidCacheTypesAllMerge&apos;);
	DECLARE ValidCacheTypesAllIncremental	VARCHAR			DEFAULT getConstant(CommonTypesPath, &apos;ValidCacheTypesAllIncremental&apos;);
	DECLARE CachingDataSelectDeployment		LONGVARCHAR		DEFAULT getConstant(CommonTypesPath, &apos;CachingDataSelectDeployment&apos;);
	DECLARE CachingDataSelectDeployLoop		LONGVARCHAR;
	DECLARE CachingDataSelectDeploySingle	LONGVARCHAR;
	DECLARE CachingDataTablePath			VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;CachingDataTablePath&apos;);
	DECLARE DEBUG_LEVEL_INFO 				INTEGER		 	DEFAULT CAST(getConstant(constantsPath, &apos;DEBUG_LEVEL_INFO&apos;) AS INTEGER);
	DECLARE DEBUG_LEVEL_ERROR 				INTEGER		 	DEFAULT CAST(getConstant(constantsPath, &apos;DEBUG_LEVEL_ERROR&apos;) AS INTEGER);
	DECLARE DEBUG_LEVEL_DEBUG 				INTEGER		 	DEFAULT CAST(getConstant(constantsPath, &apos;DEBUG_LEVEL_DEBUG&apos;) AS INTEGER);
 	DECLARE organizationName 				VARCHAR(255)	DEFAULT getConstant(constantsPath, &apos;OrganizationName&apos;);
 	DECLARE applicationName 				VARCHAR(255)	DEFAULT getConstant(constantsPath, &apos;ApplicationName&apos;);
 	DECLARE CachingDataInsertProcedure		VARCHAR(255)	DEFAULT getConstant(constantsPath, &apos;CachingDataInsertProcedure&apos;);
 	DECLARE CachingDataTableName			VARCHAR(255)	DEFAULT getConstant(constantsPath, &apos;CachingDataTableName&apos;);
	DECLARE ApplicationIncrScriptsPath 		VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;ApplicationIncrScriptsPath&apos;);		-- Used for holding the location of the incremental scripts path.		
	DECLARE ApplicationStageViewPath 		VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;ApplicationStageViewPath&apos;);			-- Used for holding the location of the staging views path.		
	DECLARE ApplicationCacheProcPath 		VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;ApplicationCacheProcPath&apos;);			-- Used for holding the location of the call back scripts path.		
	DECLARE ApplicationCacheProcImplPath 	VARCHAR(4096)	DEFAULT getConstant(constantsPath, &apos;ApplicationCacheProcImplPath&apos;);		-- Used for holding the location of the call back implementation script path.	
	DECLARE stagingViewPath					VARCHAR(4096);
	DECLARE firstRefreshCallback			VARCHAR(4096);
	DECLARE secondRefreshCallback			VARCHAR(4096);
	DECLARE cachekey						INTEGER 		DEFAULT 0;
	DECLARE configured						INTEGER;	-- determines whether the cache is configured or not
	DECLARE sessionID						DECIMAL(38,0);
	DECLARE sequenceNum						BIGINT;
	DECLARE sequenceName					VARCHAR(4096);
	DECLARE origSequenceNum					BIGINT;
	DECLARE origUserName					VARCHAR;
	DECLARE seqMessage						LONGVARCHAR;
	DECLARE ResExists						BOOLEAN;
	DECLARE resourceName					VARCHAR;
	DECLARE resourceType					VARCHAR;
	DECLARE parentPath						VARCHAR(4096);
	DECLARE sqlStatement					VARCHAR(4096);
	DECLARE rowCount						INTEGER DEFAULT 0;
	DECLARE CachingDataCurs					CURSOR /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.CachingDataType;
	DECLARE success							BIT;

	-- Generate an audit log sequence# and set it in the AUDIT_LOG_SEQ table.
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetUniqueSequenceName(inSequenceName, moduleName, &apos;SEQ&apos;, sequenceName);
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBSequenceByName(sequenceName, 0, inOrigUserName, constantsPath, prefix, origSequenceNum, origUserName, errStatus);
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetDBSequence(sequenceName, origSequenceNum, origUserName, constantsPath, prefix, sequenceNum, origUserName, errStatus);

	-- Fix paths
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/FixPath(ApplicationIncrScriptsPath, ApplicationIncrScriptsPath);
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/FixPath(ApplicationStageViewPath, ApplicationStageViewPath);
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/FixPath(ApplicationCacheProcPath, ApplicationCacheProcPath);
	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/FixPath(ApplicationCacheProcImplPath, ApplicationCacheProcImplPath);

	/*****************************************************************************************
	 * Create the dynamic SQL Statement for selecting CACHING_DATA
	 ****************************************************************************************/
	-- Use CachingDataSelectDeployment which overrides the DROP_RECREATE_VIEW_YN to N so that the view are not configured.  
	--   Only the tables are created if DROP_RECREATE_TABLE_YN=Y.

	-- When a specific resource is provided then only configure this resource
	IF (resourcePath IS NOT NULL AND LENGTH(resourcePath) &gt; 0) THEN
		-- Look for a wildcard
		IF (SUBSTR(resourcePath, LENGTH(resourcePath), 1) = &apos;%&apos;) THEN
			-- In the SQL below, the CACHE_TYPE is set to &apos;U&apos; for unknown.  This will be sorted out in the interrogation phase.
			SET CachingDataSelectDeployLoop = REPLACE(CachingDataSelectDeployment, &apos;$CachingDataTablePath&apos;, CachingDataTablePath) ||
          &apos;WHERE RUN_YN=&apos;&apos;Y&apos;&apos; 
             AND ORGANIZATION = &apos;&apos;&apos;||emptyStr(organizationName)||&apos;&apos;&apos;
             AND APPLICATION_NAME = &apos;&apos;&apos;||emptyStr(applicationName)||&apos;&apos;&apos;
             AND RESOURCE_PATH like &apos;&apos;&apos;||emptyStr(resourcePath)||&apos;&apos;&apos;&apos;;
		ELSE -- no wildcard (equality)
			-- In the SQL below, the CACHE_TYPE is set to &apos;U&apos; for unknown.  This will be sorted out in the interrogation phase.
			SET CachingDataSelectDeployLoop = REPLACE(CachingDataSelectDeployment, &apos;$CachingDataTablePath&apos;, CachingDataTablePath) ||
          &apos;WHERE RUN_YN=&apos;&apos;Y&apos;&apos; 
             AND ORGANIZATION = &apos;&apos;&apos;||emptyStr(organizationName)||&apos;&apos;&apos;
             AND APPLICATION_NAME = &apos;&apos;&apos;||emptyStr(applicationName)||&apos;&apos;&apos;
             AND RESOURCE_PATH = &apos;&apos;&apos;||emptyStr(resourcePath)||&apos;&apos;&apos;&apos;;
		END IF;
	ELSE
		-- When no resource path is provided then deconfigure the resources in CACHING_DATA table
		SET CachingDataSelectDeployLoop = REPLACE(CachingDataSelectDeployment, &apos;$CachingDataTablePath&apos;, CachingDataTablePath) ||
      &apos;WHERE RUN_YN=&apos;&apos;Y&apos;&apos; 
         AND ORGANIZATION = &apos;&apos;&apos;||emptyStr(organizationName)||&apos;&apos;&apos;
         AND APPLICATION_NAME = &apos;&apos;&apos;||emptyStr(applicationName)||&apos;&apos;&apos;&apos;;
	END IF;

	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, NULL, cachekey,  constantsPath, 
			prefix||&apos;Begin Deployment Framework for SQL=[&apos;||emptyStr(CachingDataSelectDeployLoop)||&apos;].&apos;);

	/*****************************************************************************************
	 * 1. Insert the CachingData procedure into CACHING_DATA table using CachingData_Insert()
	 ****************************************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		IF (CachingDataInsertProcedure IS NOT NULL) THEN
			-- Instruct CachingData_Insert(1) to delete all CachingData rows and then insert fresh from the CachingData procedure.  
			--   This is essentially a reset of CACHING_DATA so that it is in synch with what is being deployed.
			--   The CachingData_Insert procedure uses a delete filter on OrganizationName and ApplicationName.
			SET sqlStatement = &apos;SELECT * FROM &apos;||CachingDataInsertProcedure||&apos;(1)&apos;;

	    	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, CachingDataTableName, cachekey,  constantsPath, 
					prefix||&apos;Inserting records into the &apos;||emptyStr(CachingDataTableName)||&apos; table using SQL=[&apos;||emptyStr(sqlStatement)||&apos;].&apos;);

			OPEN CachingDataCurs FOR sqlStatement;
			FOR r AS CachingDataCurs DO
				SET rowCount = rowCount + 1;
			END FOR;
	    	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, CachingDataTableName, cachekey,  constantsPath, 
					prefix||&apos;Successfully inserted &apos;||rowCount||&apos; records into the &apos;||emptyStr(CachingDataTableName)||&apos; table.&apos;);
		ELSE
			RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned
					VALUE prefix||&apos;The &quot;CachingDataInsertProcedure&quot; may not be null or empty.   Check the Constants procedure for the correct value.&apos;;
		END IF;
	END;

	/*****************************************************************************************
	 * 2. Disable the cache views according to CACHING_DATA query
	 ****************************************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		OPEN CachingDataCurs FOR CachingDataSelectDeployLoop;
		-- itereate through each resource to be configured for caching
		FOR CachingDataRow AS CachingDataCurs DO
			SET resourcePath = CachingDataRow.RESOURCE_PATH;
			-- Get the resource type
			SELECT &quot;type&quot; INTO resourceType FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(resourcePath, NULL);

			-- Get the resource name and parent path of the resource
			CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;E&apos;, resourceName, parentPath);

			/* GetCachedConfigured(
				IN  inResourcePath			VARCHAR(4096),	-- Path to the cache view.
				IN  inResourceType			VARCHAR,		-- Resource Type
				OUT configured				INTEGER)			-- Return the cache configuration status [1=configured, 0=not configured]   */
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetCachedConfigured(resourcePath, resourceType, configured);
			IF (configured = 1) THEN
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, 
						prefix||&apos;Disabling cache for &apos;||emptyStr(resourceName)||&apos;.&apos;);

				/* cachedResources(
					IN  operation				VARCHAR,	-- R=retrieve, E=enable cache, D=disable cache
					IN	startingPath			/lib/resource/ResourceDefs.ResourcePath,-- /shared/BestPracticesTest/Physical/Formatting
					IN  includePathList			LONGVARCHAR, -- comma separated list of paths to include as filters (only execute on these paths).
					IN  excludePathList			LONGVARCHAR, -- comma separated list of paths to exclude (do not execute on these paths).
					IN 	debug					CHAR(1),	-- Y=debug is on, N=do not debug
					OUT	result					PIPE /shared/ASAssets/Utilities/repository/cachedResources.cachedResourceType)  */
				FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/cachedResources(&apos;D&apos;, parentPath, resourcePath, NULL, &apos;N&apos;) DO
					IF (r.resourcePath = resourcePath) THEN
						IF (r.currStatus = &apos;DISABLED&apos;) THEN
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
									prefix||&apos;Successfully disabled cache for &apos;||emptyStr(resourceName)||&apos;.&apos;);
						ELSE
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
									prefix||&apos;Unable to disable cache for &apos;||emptyStr(resourceName)||&apos;.&apos;);
						END IF;
					END IF;
				END FOR;

				-- Get staging view information
				IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllHybrid) &gt; 0 OR POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllMerge) &gt; 0) THEN 
					/* GetStagingViewPath(
						IN  inResourcePath			VARCHAR(4096),	-- Path to the cache view.
						IN  inResourceType			VARCHAR,		-- Resource Type
						IN  stagingFolderPath 		VARCHAR(4096),	-- The path location of the generated staging views
						OUT stagingViewPath			VARCHAR(4096))	-- Return the staging view path for the cache view resource   */
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetStagingViewPath(resourcePath, resourceType, ApplicationStageViewPath, stagingViewPath);

					-- Disable staging view
					IF (stagingViewPath IS NOT NULL) THEN
						set resourcePath = stagingViewPath;
						CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;E&apos;, resourceName, parentPath);

						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, 
								prefix||&apos;Disabling staging view cache for &apos;||emptyStr(resourceName)||&apos;.&apos;);

						/* cachedResources(
							IN  operation				VARCHAR,	-- R=retrieve, E=enable cache, D=disable cache
							IN	startingPath			/lib/resource/ResourceDefs.ResourcePath,-- /shared/BestPracticesTest/Physical/Formatting
							IN  includePathList			LONGVARCHAR, -- comma separated list of paths to include as filters (only execute on these paths).
							IN  excludePathList			LONGVARCHAR, -- comma separated list of paths to exclude (do not execute on these paths).
							IN 	debug					CHAR(1),	-- Y=debug is on, N=do not debug
							OUT	result					PIPE /shared/ASAssets/Utilities/repository/cachedResources.cachedResourceType)  */
						FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/cachedResources(&apos;D&apos;, parentPath, resourcePath, NULL, &apos;N&apos;) DO
							IF (r.resourcePath = resourcePath) THEN
								IF (r.currStatus = &apos;DISABLED&apos;) THEN
									CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
											prefix||&apos;Successfully disabled staging view cache for &apos;||emptyStr(resourceName)||&apos;.&apos;);
								ELSE
									CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
											prefix||&apos;Unable to disable staging view cache for &apos;||emptyStr(resourceName)||&apos;.&apos;);
								END IF;
							END IF;
						END FOR;
					END IF;
				END IF;
			ELSE
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
						prefix||&apos;Unable to disable cache.  Cache not configured for &apos;||emptyStr(resourceName)||&apos;.&apos;);
			END IF;
		END FOR;
	END;

	/*****************************************************************************************
	 * 3. Invoke ConfigureCacheScript to create the tables but don&apos;t configure the views
	 ****************************************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		OPEN CachingDataCurs FOR CachingDataSelectDeployLoop;
		-- itereate through each resource to be configured for caching
		FOR CachingDataRow AS CachingDataCurs DO
			SET resourcePath = CachingDataRow.RESOURCE_PATH;
			-- Get the resource type
			SELECT &quot;type&quot; INTO resourceType FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(resourcePath, NULL);

			-- Get the resource name and parent path of the resource
			CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;E&apos;, resourceName, parentPath);

			/* GetCachedConfigured(
				IN  inResourcePath			VARCHAR(4096),	-- Path to the cache view.
				IN  inResourceType			VARCHAR,		-- Resource Type
				OUT configured				INTEGER)			-- Return the cache configuration status [1=configured, 0=not configured]   */
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetCachedConfigured(resourcePath, resourceType, configured);
			IF (configured = 1) THEN
				-- In the SQL below the RESOURCE_PATH uses exact match so an &quot;=&quot; statement is used.
				SET CachingDataSelectDeploySingle = REPLACE(CachingDataSelectDeployment, &apos;$CachingDataTablePath&apos;, CachingDataTablePath) ||
          &apos;WHERE RUN_YN=&apos;&apos;Y&apos;&apos; 
             AND ORGANIZATION = &apos;&apos;&apos;||emptyStr(organizationName)||&apos;&apos;&apos;
             AND APPLICATION_NAME = &apos;&apos;&apos;||emptyStr(applicationName)||&apos;&apos;&apos;
             AND RESOURCE_PATH = &apos;&apos;&apos;||emptyStr(resourcePath)||&apos;&apos;&apos;&apos;;
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, 
						prefix||&apos;Configuring cache tables for SQL=[&apos;||emptyStr(CachingDataSelectDeploySingle)||&apos;].&apos;);

				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/ConfigureCacheScript(prefix, sequenceNum, origUserName, constantsPath, CachingDataSelectDeploySingle, errStatus, errMessage);
				IF errStatus = &apos;SUCCESS&apos; THEN
 				  	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
							prefix||&apos;Successfully configured cache tables for SQL=[&apos;||emptyStr(CachingDataSelectDeploySingle)||&apos;].&apos;);
				ELSE
					RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned value errMessage;
				END IF;
			ELSE
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
						prefix||&apos;Unable to configure cache.  Cache not configured for &apos;||emptyStr(resourceName)||&apos;.&apos;);
			END IF;
		END FOR;
	END;

	/*****************************************************************************************
	 * 4. Update impacted resources
	 ****************************************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		OPEN CachingDataCurs FOR CachingDataSelectDeployLoop;
		---------------------------------------------------------------------------------------
		-- Itereate through each resource to be configured for caching
		---------------------------------------------------------------------------------------
		FOR CachingDataRow AS CachingDataCurs DO
			SET resourcePath = CachingDataRow.RESOURCE_PATH;
			-- Get the resource type
			SELECT &quot;type&quot; INTO resourceType FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(resourcePath, NULL);

			-- Get the resource name and parent path of the resource
			CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;E&apos;, resourceName, parentPath);

			/* GetCachedConfigured(
				IN  inResourcePath			VARCHAR(4096),	-- Path to the cache view.
				IN  inResourceType			VARCHAR,		-- Resource Type
				OUT configured				INTEGER)			-- Return the cache configuration status [1=configured, 0=not configured]   */
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetCachedConfigured(resourcePath, resourceType, configured);
			IF (configured = 1) THEN
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, 
						prefix||&apos;Updating impacted resources for parent path [&apos;||emptyStr(parentPath)||&apos;] and cache resource name &apos;||emptyStr(resourceName)||&apos;.&apos;);

				/* updateImpactedResources(
					IN debug					CHAR(1),
					IN inStartingFolders 		LONGVARCHAR, -- a comma separated list of startingFolder paths like: /shared/&quot;_deployment&quot;
					IN inExcludePathsKeywords	LONGVARCHAR, -- exclude paths containing these keywords (case insensitive)
															 --   examples: Analysis,Archive,save,validation
					OUT  success				BIT) */
				CALL /shared/ASAssets/Utilities/repository/updateImpactedResources(&apos;N&apos;, parentPath, NULL, success);
				IF (success = 1) THEN
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
							prefix||&apos;Successfully updated impacted resources for parent path [&apos;||emptyStr(parentPath)||&apos;] and cache resource name &apos;||emptyStr(resourceName)||&apos;.&apos;);
				ELSE
					 CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
							prefix||&apos;Unable to update impacted resources for &apos;||emptyStr(resourceName)||&apos;.&apos;);
				END IF;

				-- Get staging view information
				IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllHybrid) &gt; 0 OR POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllMerge) &gt; 0) THEN 
					/* GetStagingViewPath(
						IN  inResourcePath			VARCHAR(4096),	-- Path to the cache view.
						IN  inResourceType			VARCHAR,		-- Resource Type
						IN  stagingFolderPath 		VARCHAR(4096),	-- The path location of the generated staging views
						OUT stagingViewPath			VARCHAR(4096))	-- Return the staging view path for the cache view resource   */
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetStagingViewPath(resourcePath, resourceType, ApplicationStageViewPath, stagingViewPath);

					-- Disable staging view
					IF (stagingViewPath IS NOT NULL) THEN
						CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(stagingViewPath, &apos;E&apos;, resourceName, parentPath);

						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, 
								prefix||&apos;Updating impacted resources for parent path [&apos;||emptyStr(parentPath)||&apos;] and cache resource name &apos;||emptyStr(resourceName)||&apos;.&apos;);

						---------------------------------------------------------------------------------------
						-- Update all impacted resources in ApplicationStageViewPath &quot;/CacheStagingViews&quot;
						---------------------------------------------------------------------------------------
						/* updateImpactedResources(
							IN debug					CHAR(1),
							IN inStartingFolders 		LONGVARCHAR, -- a comma separated list of startingFolder paths like: /shared/&quot;_deployment&quot;
							IN inExcludePathsKeywords	LONGVARCHAR, -- exclude paths containing these keywords (case insensitive)
																	 --   examples: Analysis,Archive,save,validation
							OUT  success				BIT) */
						CALL /shared/ASAssets/Utilities/repository/updateImpactedResources(&apos;N&apos;, parentPath, NULL, success);
						IF (success = 1) THEN
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
									prefix||&apos;Successfully updated impacted resources for path [&apos;||emptyStr(parentPath)||&apos;].&apos;);
						ELSE
							 CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
									prefix||&apos;Unable to update impacted resources for &apos;||emptyStr(parentPath)||&apos;.&apos;);
						END IF;

					END IF;
				END IF;

				-- Get the cache first and second scripts.  Incremental=Initial and Delta.  Non-incremental=Pre-callback and Post-callback.
				FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceCacheConfigCursor(resourcePath, resourceType) DO
					-- Get the first and second script paths
					SET firstRefreshCallback = r.firstRefreshCallback;
					SET secondRefreshCallback = r.secondRefreshCallback;
				END FOR;

				-- Update impacted resources
				IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllIncremental) &gt; 0) THEN 
					IF (firstRefreshCallback IS NOT NULL OR secondRefreshCallback IS NOT NULL) THEN
						---------------------------------------------------------------------------------------
						-- Update all impacted resources in ApplicationIncrScriptsPath &quot;/CacheLoadScripts&quot;
						---------------------------------------------------------------------------------------
						/* updateImpactedResources(
							IN debug					CHAR(1),
							IN inStartingFolders 		LONGVARCHAR, -- a comma separated list of startingFolder paths like: /shared/&quot;_deployment&quot;
							IN inExcludePathsKeywords	LONGVARCHAR, -- exclude paths containing these keywords (case insensitive)
																	 --   examples: Analysis,Archive,save,validation
							OUT  success				BIT) */
						CALL /shared/ASAssets/Utilities/repository/updateImpactedResources(&apos;N&apos;, ApplicationIncrScriptsPath, NULL, success);
						IF (success = 1) THEN
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
									prefix||&apos;Successfully updated impacted resources for path [&apos;||emptyStr(ApplicationIncrScriptsPath)||&apos;].&apos;);
						ELSE
							 CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
									prefix||&apos;Unable to update impacted resources for &apos;||emptyStr(ApplicationIncrScriptsPath)||&apos;.&apos;);
						END IF;
					END IF;
				END IF;

				-- Update impacted resources
				IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllFull) &gt; 0) THEN 
					IF (firstRefreshCallback IS NOT NULL OR secondRefreshCallback IS NOT NULL) THEN
						---------------------------------------------------------------------------------------
						-- Update all impacted resources in ApplicationCacheProcPath &quot;/CacheCallbackScripts&quot;
						---------------------------------------------------------------------------------------
						/* updateImpactedResources(
							IN debug					CHAR(1),
							IN inStartingFolders 		LONGVARCHAR, -- a comma separated list of startingFolder paths like: /shared/&quot;_deployment&quot;
							IN inExcludePathsKeywords	LONGVARCHAR, -- exclude paths containing these keywords (case insensitive)
																	 --   examples: Analysis,Archive,save,validation
							OUT  success				BIT) */
						CALL /shared/ASAssets/Utilities/repository/updateImpactedResources(&apos;N&apos;, ApplicationCacheProcPath, NULL, success);
						IF (success = 1) THEN
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
									prefix||&apos;Successfully updated impacted resources for path [&apos;||emptyStr(ApplicationCacheProcPath)||&apos;].&apos;);
						ELSE
							 CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
									prefix||&apos;Unable to update impacted resources for &apos;||emptyStr(ApplicationCacheProcPath)||&apos;.&apos;);
						END IF;

						---------------------------------------------------------------------------------------
						-- Update all impacted resources in ApplicationCacheProcImplPath &quot;/CacheCallbackScripts&quot;
						---------------------------------------------------------------------------------------
						IF (ApplicationCacheProcImplPath != ApplicationCacheProcPath) THEN
							/* updateImpactedResources(
								IN debug					CHAR(1),
								IN inStartingFolders 		LONGVARCHAR, -- a comma separated list of startingFolder paths like: /shared/&quot;_deployment&quot;
								IN inExcludePathsKeywords	LONGVARCHAR, -- exclude paths containing these keywords (case insensitive)
																		 --   examples: Analysis,Archive,save,validation
								OUT  success				BIT) */
							CALL /shared/ASAssets/Utilities/repository/updateImpactedResources(&apos;N&apos;, ApplicationCacheProcImplPath, NULL, success);
							IF (success = 1) THEN
								CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
										prefix||&apos;Successfully updated impacted resources for path [&apos;||emptyStr(ApplicationCacheProcImplPath)||&apos;].&apos;);
							ELSE
								 CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
										prefix||&apos;Unable to update impacted resources for &apos;||emptyStr(ApplicationCacheProcImplPath)||&apos;.&apos;);
							END IF;
						END IF;
					END IF;
				END IF;

			ELSE
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
						prefix||&apos;Unable to update impacted resources for cache.  Cache not configured for &apos;||emptyStr(resourceName)||&apos;.&apos;);
			END IF;
		END FOR;
	END;

	/*****************************************************************************************
	 * 5. Enable the cache views according to CACHING_DATA query
	 ****************************************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		OPEN CachingDataCurs FOR CachingDataSelectDeployLoop;
		-- itereate through each resource to be configured for caching
		FOR CachingDataRow AS CachingDataCurs DO
			SET resourcePath = CachingDataRow.RESOURCE_PATH;
			-- Get the resource type
			SELECT &quot;type&quot; INTO resourceType FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(resourcePath, NULL);

			-- Get the resource name and parent path of the resource
			CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;E&apos;, resourceName, parentPath);

			/* GetCachedConfigured(
				IN  inResourcePath			VARCHAR(4096),	-- Path to the cache view.
				IN  inResourceType			VARCHAR,		-- Resource Type
				OUT configured				INTEGER)			-- Return the cache configuration status [1=configured, 0=not configured]   */
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetCachedConfigured(resourcePath, resourceType, configured);
			IF (configured = 1) THEN
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, 
						prefix||&apos;Enabling cache for &apos;||emptyStr(resourceName)||&apos;.&apos;);

				/* cachedResources(
					IN  operation				VARCHAR,	-- R=retrieve, E=enable cache, D=disable cache
					IN	startingPath			/lib/resource/ResourceDefs.ResourcePath,-- /shared/BestPracticesTest/Physical/Formatting
					IN  includePathList			LONGVARCHAR, -- comma separated list of paths to include as filters (only execute on these paths).
					IN  excludePathList			LONGVARCHAR, -- comma separated list of paths to exclude (do not execute on these paths).
					IN 	debug					CHAR(1),	-- Y=debug is on, N=do not debug
					OUT	result					PIPE /shared/ASAssets/Utilities/repository/cachedResources.cachedResourceType)  */
				FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/cachedResources(&apos;E&apos;, parentPath, resourcePath, NULL, &apos;N&apos;) DO
					IF (r.resourcePath = resourcePath) THEN
						IF (r.currStatus = &apos;ENABLED&apos;) THEN
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
									prefix||&apos;Successfully enabled cache for &apos;||emptyStr(resourceName)||&apos;.&apos;);
						ELSE
							CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
									prefix||&apos;Unable to enable cache for &apos;||emptyStr(resourceName)||&apos;.&apos;);
						END IF;
					END IF;
				END FOR;

				-- Get staging view information
				IF (POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllHybrid) &gt; 0 OR POSITION(CachingDataRow.CACHE_TYPE IN ValidCacheTypesAllMerge) &gt; 0) THEN 
					/* GetStagingViewPath(
						IN  inResourcePath			VARCHAR(4096),	-- Path to the cache view.
						IN  inResourceType			VARCHAR,		-- Resource Type
						IN  stagingFolderPath 		VARCHAR(4096),	-- The path location of the generated staging views
						OUT stagingViewPath			VARCHAR(4096))	-- Return the staging view path for the cache view resource   */
					CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/GetStagingViewPath(resourcePath, resourceType, ApplicationStageViewPath, stagingViewPath);

					-- Disable staging view
					IF (stagingViewPath IS NOT NULL) THEN
						set resourcePath = stagingViewPath;
						CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;E&apos;, resourceName, parentPath);

						CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_DEBUG, null, moduleName, resourceName, cachekey,  constantsPath, 
								prefix||&apos;Enabling staging view cache for &apos;||emptyStr(resourceName)||&apos;.&apos;);

						/* cachedResources(
							IN  operation				VARCHAR,	-- R=retrieve, E=enable cache, D=disable cache
							IN	startingPath			/lib/resource/ResourceDefs.ResourcePath,-- /shared/BestPracticesTest/Physical/Formatting
							IN  includePathList			LONGVARCHAR, -- comma separated list of paths to include as filters (only execute on these paths).
							IN  excludePathList			LONGVARCHAR, -- comma separated list of paths to exclude (do not execute on these paths).
							IN 	debug					CHAR(1),	-- Y=debug is on, N=do not debug
							OUT	result					PIPE /shared/ASAssets/Utilities/repository/cachedResources.cachedResourceType)  */
						FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/cachedResources(&apos;E&apos;, parentPath, resourcePath, NULL, &apos;N&apos;) DO
							IF (r.resourcePath = resourcePath) THEN
								IF (r.currStatus = &apos;ENABLED&apos;) THEN
									CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
											prefix||&apos;Successfully enabled staging view cache for &apos;||emptyStr(resourceName)||&apos;.&apos;);
								ELSE
									CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, resourceName, cachekey,  constantsPath, 
											prefix||&apos;Unable to enable staging view cache for &apos;||emptyStr(resourceName)||&apos;.&apos;);
								END IF;
							END IF;
						END FOR;
					END IF;
				END IF;
			ELSE
				CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, resourceName, cachekey,  constantsPath, 
						prefix||&apos;Unable to enable cache.  Cache not configured for &apos;||emptyStr(resourceName)||&apos;.&apos;);
			END IF;
		END FOR;
	END;

	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_INFO, null, moduleName, NULL, cachekey,  constantsPath, 
			prefix||&apos;End Deployment Framework.&apos;);

	-- Remove the sequence from the audit log sequence table if it was generated within this procedure
	IF (origSequenceNum IS NULL OR origSequenceNum = 0) THEN
		CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DeleteDBSequence(sequenceName, sequenceNum, origUserName, constantsPath, prefix, errStatus, errMessage);
		IF (errStatus = &apos;FAIL&apos;) THEN
			RAISE /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned VALUE errMessage;
		END IF;
	END IF;
	SET errStatus = &apos;SUCCESS&apos;;
	SET errMessage = NULL;

EXCEPTION
    WHEN /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exResourceNotFound THEN
		SET errMessage = CURRENT_EXCEPTION.MESSAGE;
    	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, null, cachekey,  constantsPath, errMessage);
		-- Remove the sequence from the audit log sequence table if it was generated within this procedure
		IF (origSequenceNum IS NULL OR origSequenceNum = 0) THEN
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DeleteDBSequence(sequenceName, sequenceNum, origUserName, constantsPath, prefix, errStatus, seqMessage);
		END IF;
        SET errStatus = &apos;FAIL&apos;;
 	WHEN /shared/ASAssets/CacheManagement/CacheFramework/Scripts/CommonTypes.exErrorReturned THEN
    	SET errMessage = CURRENT_EXCEPTION.MESSAGE;
    	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, null, cachekey,  constantsPath, errMessage);
		-- Remove the sequence from the audit log sequence table if it was generated within this procedure
		IF (origSequenceNum IS NULL OR origSequenceNum = 0) THEN
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DeleteDBSequence(sequenceName, sequenceNum, origUserName, constantsPath, prefix, errStatus, seqMessage);
		END IF;
        SET errStatus = &apos;FAIL&apos;;
    ELSE
    	SET errMessage = CURRENT_EXCEPTION.TRACE;
    	CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/cfLog(sequenceNum, origUserName, DEBUG_LEVEL_ERROR, null, moduleName, null, cachekey,  constantsPath, errMessage);
		-- Remove the sequence from the audit log sequence table if it was generated within this procedure
		IF (origSequenceNum IS NULL OR origSequenceNum = 0) THEN
			CALL /shared/ASAssets/CacheManagement/CacheFramework/Scripts/HelperScripts/DeleteDBSequence(sequenceName, sequenceNum, origUserName, constantsPath, prefix, errStatus, seqMessage);
		END IF;
        SET errStatus = &apos;FAIL&apos;;
END</attribute>
  <attribute name="creationDate" type="LONG">1387221618621</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1415054676443</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>